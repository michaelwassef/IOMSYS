
@{
    ViewData["Title"] = "PurchaseInvoicesPage";
    Layout = "_DevExtremeLayout";
}

<h1 class="text-center">اضافة فاتوره مشتريات جديدة</h1>

<div id="alertPlaceholder"></div>

<div id="itemForm">
    <h3>اضافة الاصناف</h3>
    <div class="row">
        <div class="form-group col-md-4 mb-3">
        <label for="ProductId">اسم المنتج</label>
        <select id="ProductId" class="form-control" placeholder="اسم المنتج" required></select>
    </div>
        <div class="form-group col-md-4 mb-3">
        <label for="SizeId">المقاس</label>
        <select id="SizeId" class="form-control" placeholder="المقاس" required></select>
    </div>
    <div class="form-group col-md-4 mb-3">
        <label for="ColorId">اللون</label>
        <select id="ColorId" class="form-control" placeholder="اللون" required></select>
    </div>
    <div class="form-group col-md-4 mb-3">
        <label for="Quantity">الكمية</label>
        <input type="number" id="Quantity" class="form-control" placeholder="الكمية" required min="0" />
    </div>
        <div class="form-group col-md-4 mb-3">
        <label for="BuyPrice">سعر الشراء للواحد</label>
        <input type="number" id="BuyPrice" class="form-control" placeholder="سعر الشراء للواحد" required min="0" />
    </div>
        <div class="form-group col-md-4 mb-3">
        <label for="SellPrice">سعر البيع للواحد</label>
        <input type="number" id="SellPrice" class="form-control" placeholder="سعر البيع للواحد" min="0" />
    </div>
        <button type="button" onclick="addItem()" class="btn btn-primary mb-3">اضافة صنف</button>
</div>
</div>

<!-- Display items -->
<div id="itemsGridContainer"></div>

<!-- Invoice Details Form -->
<form id="invoiceForm">
    <div id="invoiceDetailsForm" style="margin-top: 20px;">
        <h3>بيانات الفاتورة</h3>
        <div class="row">
            <div class="form-group col-md-4 mb-3">
                <label for="supplierId">اسم المورد</label>
                <select id="SupplierId" class="form-control" required></select>
            </div>
            <div class="form-group col-md-4 mb-3">
                <label for="branchId">اسم الفرع</label>
                    <select id="BranchId" class="form-control"></select>
            </div>
            <div class="form-group col-md-4 mb-3">
                <label for="paymentMethodName">طريقة الدفع</label>
                    <select id="PaymentMethodId" class="form-control" required></select>
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="totalAmount">اجمالي مبلغ الفاتورة</label>
                <input type="number" id="totalAmount" class="form-control" placeholder="اجمالي مبلغ الفاتورة" required readonly min="0" />
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="paidUp">المدفوع</label>
                <input type="number" id="paidUp" class="form-control" placeholder="المدفوع" required min="0" />
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="fullPaymentCheckbox">
                    <label class="form-check-label" for="fullPaymentCheckbox">
                        دفع كامل المبلغ
                    </label>
                </div>
            </div>
            <div class="form-group col-md-2 mb-3">
                <label for="remainder">الباقي</label>
                <input type="number" id="remainder" class="form-control" placeholder="الباقي" required min="0" readonly />
            </div>
            <div class="form-group col-md-2 mb-3">
                <label for="PaidUpDate">تاريخ التحصيل</label>
                <input type="date" id="PaidUpDate" class="form-control mb-3" placeholder="تاريخ التحصيل" required />
            </div>
            <div class="form-group col-md-2 mb-3">
                <label for="purchaseDate">تاريخ الفاتورة</label>
                <input type="date" id="purchaseDate" class="form-control mb-3" placeholder="تاريخ الفاتورة" required/>
            </div>
               <button type="button" onclick="saveInvoice()" class="btn btn-success my-3">حفظ الفاتورة</button>
        </div>
    </div>
</form>

<script>
    async function populateDropdown(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = document.getElementById(elementId);
                selectElement.innerHTML = '';
                selectElement.add(new Option("برجاء الاختيار", ""));
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.add(option);
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    async function populateDropdownSEARCH(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                let options = [];

                options.push(new Option("برجاء الاختيار", "", true, true));

                data.forEach(item => {
                    const optionText = `${item[valueField]} - ${item[textField]}`;
                    options.push(new Option(optionText, item[valueField], false, false));
                });

                selectElement.empty().append(options);

                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });

                selectElement.data('select2').$container.addClass('custom-font-size');
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    async function fetchSellPrice(productId) {
    try {
        const response = await fetch(`/Products/LoadProductById?ProductId=${productId}`);
        if (response.ok) {
            const data = await response.json();
                document.getElementById('SellPrice').value = data.SellPrice;
                document.getElementById('BuyPrice').value = data.BuyPrice;
        } else {
                document.getElementById('SellPrice').value = '';
                document.getElementById('BuyPrice').value = '';
        }
    } catch (error) {
            document.getElementById('SellPrice').value = '';
            document.getElementById('BuyPrice').value = '';
    }
    }

    document.addEventListener('DOMContentLoaded', function () {
        populateDropdownSEARCH('/Products/LoadProducts', 'ProductId', 'ProductId', 'ProductName');
        populateDropdown('/Sizes/LoadSizes', 'SizeId', 'SizeId', 'SizeName');
        populateDropdown('/Colors/LoadColors', 'ColorId', 'ColorId', 'ColorName');
        populateDropdownSEARCH('/Suppliers/LoadSuppliers', 'SupplierId', 'SupplierId', 'SupplierName');
        populateDropdown('/Branches/LoadBranchesByUser', 'BranchId', 'BranchId', 'BranchName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'PaymentMethodId', 'PaymentMethodId', 'PaymentMethodName');
        document.getElementById('paidUp').addEventListener('input', calculateTotals);

        refreshItemsGrid();

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById('purchaseDate').value = today;

        $('#ProductId').on('change', function () {
            var productId = $(this).val();
            if (productId) {
                fetchSellPrice(productId);
            } else {
                document.getElementById('SellPrice').value = '';
                document.getElementById('BuyPrice').value = '';
            }
        });

        document.getElementById('fullPaymentCheckbox').addEventListener('change', function () {
            if (this.checked) {
                document.getElementById('paidUp').value = document.getElementById('totalAmount').value;
            } else {
                document.getElementById('paidUp').value = '';
            }
            calculateTotals();
        });
    });

    var tempItems = []; // Temporary storage for items

    function addItem() {
        // Get item details
        var productId = document.getElementById('ProductId').value;
        var sizeId = document.getElementById('SizeId').value;
        var colorId = document.getElementById('ColorId').value;
        var quantity = parseInt(document.getElementById('Quantity').value);
        var buyPrice = parseFloat(document.getElementById('BuyPrice').value);
        var sellPrice = parseFloat(document.getElementById('SellPrice').value);

        // Check if any field is empty
        if (!productId || !sizeId || !colorId || !quantity || !buyPrice || !sellPrice) {
            alert('برجاء ملاء بيانات الاصناف');
            return;
        }
        if (buyPrice > sellPrice) {
            alert('يجب ان يكون سعر البيع اكبر من الشراء');
            return;
        }

        // Add to temporary storage
        tempItems.push({ ProductId: productId, SizeId: sizeId, ColorId: colorId, Quantity: quantity, BuyPrice: buyPrice, SellPrice: sellPrice });

        // Reset input fields
        $('#ProductId').val(null).trigger('change');
        document.getElementById('SizeId').value = '';
        document.getElementById('ColorId').value = '';
        document.getElementById('Quantity').value = '';
        document.getElementById('BuyPrice').value = '';
        document.getElementById('SellPrice').value = '';

        // Refresh the grid
        refreshItemsGrid();
        calculateTotals();
    }

    let productsLookup = [];
    async function fetchProductsLookup() {
        const response = await fetch('/Products/LoadProducts');
        if (response.ok) {
            productsLookup = await response.json();
        }
    }
    fetchProductsLookup();

    let sizesLookup = [];
    async function fetchsizesLookup() {
        const response = await fetch('/Sizes/LoadSizes');
        if (response.ok) {
            sizesLookup = await response.json();
        }
    }
    fetchsizesLookup();

    let colorsLookup = [];
    async function fetchcolorsLookup() {
        const response = await fetch('/Colors/LoadColors');
        if (response.ok) {
            colorsLookup = await response.json();
        }
    }
    fetchcolorsLookup();

    function refreshItemsGrid() {
        $("#itemsGridContainer").dxDataGrid({
            dataSource: tempItems,
            columns: [
                {
                    dataField: "ProductId", caption: "اسم المنتج" , lookup: {
                        dataSource: productsLookup,
                        valueExpr: "ProductId",
                        displayExpr: "ProductName"
                    }
                },
                {
                    dataField: "SizeId", caption: "المقاس", lookup: {
                        dataSource: sizesLookup,
                        valueExpr: "SizeId",
                        displayExpr: "SizeName"
                    }
                },
                {
                    dataField: "ColorId", caption: "اللون", lookup: {
                        dataSource: colorsLookup,
                        valueExpr: "ColorId",
                        displayExpr: "ColorName"
                    }
                },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "BuyPrice", caption: "سعر الشراء للواحد" },
                { dataField: "SellPrice", caption: "سعر البيع للواحد" }
            ],
            showBorders: true,
            editing: { 
                allowDeleting: true
            },
            onRowRemoved: function (e) {
                calculateTotals();
                document.getElementById('paidUp').value = document.getElementById('totalAmount').value;
                calculateTotals();
            },
            onRowRemoving: function (e) {
                var index = tempItems.indexOf(e.data);
                if (index > -1) {
                    tempItems.splice(index, 1); 
                }
            },
            rtlEnabled: true,
            columnAutoWidth: true
        });
    }

    function calculateTotals() {
    let totalAmount = 0;
        // Calculate totalAmount
        tempItems.forEach(item => {
            totalAmount += item.Quantity * item.BuyPrice;
        });

        // Update totalAmount input
        document.getElementById('totalAmount').value = totalAmount.toFixed(2);

        // Calculate remainder
        const paidUp = parseFloat(document.getElementById('paidUp').value) || 0;
        const remainder = totalAmount - paidUp;

        // Update remainder input
        document.getElementById('remainder').value = remainder.toFixed(2);
    }

    function displayMessage(type, message) {
    const messageContainer = document.createElement("div");
    messageContainer.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    messageContainer.role = "alert";
    messageContainer.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    const alertPlaceholder = document.getElementById("alertPlaceholder");
    alertPlaceholder.innerHTML = '';
    alertPlaceholder.appendChild(messageContainer);

    setTimeout(() => {
        $(messageContainer).fadeOut('slow', () => {
            messageContainer.remove();
        });
    }, 5000);
}



    async function saveInvoice() {
         if (tempItems.length === 0) {
            alert('يجب اضافة صنف واحد علي الاقل');
            return; // Stop the function execution
        }

        // Create FormData object
        var formData = new FormData();

        formData.append("items", JSON.stringify(tempItems));

        // Append other invoice details to formData
        formData.append("SupplierId", document.getElementById('SupplierId').value);
        formData.append("BranchId", document.getElementById('BranchId').value);
        formData.append("PaymentMethodId", document.getElementById('PaymentMethodId').value);
        formData.append("TotalAmount", document.getElementById('totalAmount').value);
        formData.append("PaidUp", document.getElementById('paidUp').value);
        formData.append("Remainder", document.getElementById('remainder').value);
        formData.append("PaidUpDate", document.getElementById('PaidUpDate').value);
        formData.append("PurchaseDate", document.getElementById('purchaseDate').value);

        try {
            let response = await fetch('/PurchaseInvoices/AddNewPurchaseInvoice', {
                method: 'POST',
                body: formData 
            });
            if (response.ok) {
                let result = await response.json();
                if (result.success) {
                    displayMessage('success', result.message);
                    document.getElementById('invoiceForm').reset();
                    tempItems = [];
                    refreshItemsGrid();

                    var today = new Date();
                    var dd = String(today.getDate()).padStart(2, '0');
                    var mm = String(today.getMonth() + 1).padStart(2, '0');
                    var yyyy = today.getFullYear();
                    today = yyyy + '-' + mm + '-' + dd;
                    document.getElementById('purchaseDate').value = today;
                } else {
                    displayMessage('error', result.message);
                }
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error saving invoice');
        }
    }
    refreshItemsGrid();
</script>

<style>
    .select2-container--default .select2-selection--single {
        height: auto;
        padding: 3px;
    }
</style>
