
@{
    ViewData["Title"] = "PurchaseInvoicesPage";
    Layout = "_DevExtremeLayout";
}

<h1>اضافة فاتوره مشتريات جديدة</h1>

<!-- Temporarily store items here -->
<div id="itemForm">
    <h3>اضافة الاصناف</h3>
    <div class="row">
        <div class="form-group col-md-4 mb-3">
        <label for="ProductId">اسم المنتج</label>
        <select id="ProductId" class="form-control" placeholder="Product Name"></select>
    </div>
        <div class="form-group col-md-4 mb-3">
        <label for="SizeId">المقاس</label>
        <select id="SizeId" class="form-control" placeholder="Size"></select>
    </div>
    <div class="form-group col-md-4 mb-3">
        <label for="ColorId">اللون</label>
        <select id="ColorId" class="form-control" placeholder="Color"></select>
    </div>
    <div class="form-group col-md-6 mb-3">
        <label for="Quantity">الكمية</label>
        <input type="number" id="Quantity" class="form-control" placeholder="Quantity" />
    </div>
        <div class="form-group col-md-6 mb-3">
        <label for="BuyPrice">سعر الشراء للواحد</label>
        <input type="number" id="BuyPrice" class="form-control" placeholder="Buy Price For one" />
    </div>
        <button type="button" onclick="addItem()" class="btn btn-primary mb-3">Add Item</button>
</div>
</div>

<!-- Display items -->
<div id="itemsGridContainer"></div>

<!-- Invoice Details Form -->
<div id="invoiceDetailsForm" style="margin-top: 20px;">
    <h3>بيانات الفاتورة</h3>
   <div class="row">
    <div class="form-group col-md-4 mb-3">
        <label for="supplierId">اسم المورد</label>
        <select id="supplierName" class="form-control"></select>
    </div>
    <div class="form-group col-md-4 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="branchName" class="form-control"></select>
    </div>
    <div class="form-group col-md-4 mb-3">
        <label for="paymentMethodName">طريقة الدفع</label>
        <select id="paymentMethodName" class="form-control"></select>
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="totalAmount">اجمالي مبلغ الفاتورة</label>
        <input type="number" id="totalAmount" class="form-control" placeholder="اجمالي مبلغ الفاتورة" />
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="paidUp">المدفوع</label>
        <input type="number" id="paidUp" class="form-control" placeholder="المدفوع" />
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="remainder">الباقي</label>
        <input type="number" id="remainder" class="form-control" placeholder="الباقي" />
    </div>
        <div class="form-group col-md-3 mb-3">
        <label for="purchaseDate">تاريخ الفاتورة</label>
            <input type="date" id="purchaseDate" class="form-control mb-3" placeholder="تاريخ الفاتورة" />
    </div>
        <button type="button" onclick="saveInvoice()" class="btn btn-success">حفظ الفاتورة</button>
</div>
</div>



<script>
    async function populateDropdown(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = document.getElementById(elementId);
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.add(option);
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    // Populate each dropdown after the page has loaded
    document.addEventListener('DOMContentLoaded', function () {
        populateDropdown('/Products/LoadProducts', 'ProductId', 'ProductId', 'ProductName');
        populateDropdown('/Sizes/LoadSizes', 'SizeId', 'SizeId', 'SizeName');
        populateDropdown('/Colors/LoadColors', 'ColorId', 'ColorId', 'ColorName');
        refreshItemsGrid(); 
    });

    async function populateDropdown(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = document.getElementById(elementId);
                // Clear existing options first
                selectElement.innerHTML = '';
                // Optionally add a default "Select" option
                selectElement.add(new Option("Please select", ""));
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.add(option);
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        populateDropdown('/Suppliers/LoadSuppliers', 'supplierName', 'SupplierId', 'SupplierName');
        populateDropdown('/Branches/LoadBranches', 'branchName', 'BranchId', 'BranchName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'paymentMethodName', 'PaymentMethodId', 'PaymentMethodName');
    });

    var tempItems = []; // Temporary storage for items

    function addItem() {
        // Get item details
        var productId = document.getElementById('ProductId').value;
        var sizeId = document.getElementById('SizeId').value;
        var colorId = document.getElementById('ColorId').value;
        var quantity = parseInt(document.getElementById('Quantity').value, 10);
        var buyPrice = parseFloat(document.getElementById('BuyPrice').value);

        // Add to temporary storage
        tempItems.push({ ProductId: productId, SizeId: sizeId, ColorId: colorId , Quantity: quantity, BuyPrice: buyPrice });

        // Reset input fields
        document.getElementById('ProductId').value = '';
        document.getElementById('SizeId').value = '';
        document.getElementById('ColorId').value = '';
        document.getElementById('Quantity').value = '';
        document.getElementById('BuyPrice').value = '';

        // Refresh the grid
        refreshItemsGrid();
    }

    function refreshItemsGrid() {
        $("#itemsGridContainer").dxDataGrid({
            dataSource: tempItems,
            columns: [
                { dataField: "ProductId", caption: "اسم المنتج" },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "SizeId", caption: "المقاس" },
                { dataField: "ColorId", caption: "اللون" },
                { dataField: "BuyPrice", caption: "سعر البيع للواحد" }
            ],
            showBorders: true,
            editing: {
                allowDeleting: true 
            },
            onRowRemoving: function (e) {
                var index = tempItems.indexOf(e.data);
                if (index > -1) {
                    tempItems.splice(index, 1); 
                }
            }
        });
    }

    async function saveInvoice() {
        // Create FormData object
        var formData = new FormData();

        // Assuming tempItems is an array of item objects
        // Convert item objects array into a JSON string and append to formData
        formData.append("items", JSON.stringify(tempItems));

        // Append other invoice details to formData
        formData.append("SupplierId", document.getElementById('supplierName').value);
        formData.append("BranchId", document.getElementById('branchName').value);
        formData.append("PaymentMethodId", document.getElementById('paymentMethodName').value);
        formData.append("TotalAmount", document.getElementById('totalAmount').value);
        formData.append("PaidUp", document.getElementById('paidUp').value);
        formData.append("Remainder", document.getElementById('remainder').value);
        formData.append("PurchaseDate", document.getElementById('purchaseDate').value);

        try {
            let response = await fetch('/PurchaseInvoices/AddNewPurchaseInvoice', {
                method: 'POST',
                body: formData 
            });

            if (response.ok) {
                let result = await response.json();
                console.log(result);
                alert('Invoice saved successfully');
                // Reset form and tempItems array
                document.getElementById('invoiceDetailsForm').reset();
                tempItems = [];
                refreshItemsGrid();
            } else {
                alert('Failed to save invoice');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error saving invoice');
        }
    }
    refreshItemsGrid();
</script>