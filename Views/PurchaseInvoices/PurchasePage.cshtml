
@{
    ViewData["Title"] = "PurchaseInvoicesPage";
    Layout = "_DevExtremeLayout";
}

<h1>فواتير المشتريات</h1>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>

<div id="gridContainer"></div>


@*@(Html.DevExtreme().DataGrid<PurchaseInvoicesModel>()
    .ID("gridContainer")
    .DataSource(d => d
        .Mvc()
        .Controller("PurchaseInvoices")
        .LoadAction("LoadPurchaseInvoicesByBranch")
        .UpdateAction("UpdatePurchaseInvoice")
        .DeleteAction("DeletePurchaseInvoice")
        .Key("PurchaseInvoiceId")
    ).OnToolbarPreparing("onToolbarPreparing")
    .Selection(s => s.Mode(SelectionMode.Multiple))
     .Export(e => e.Enabled(true).AllowExportSelectedData(true))
     .OnExporting("exporting")
     .AllowColumnResizing(true)
     .ColumnAutoWidth(true)
     .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        .AllowUpdating(true)
        .Popup(p => p
                .Title("فاتورة مشتريات")
                .ShowTitle(true)
                .Width(800)
                .Height(700))
    )
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.PurchaseInvoiceId).Caption("رقم الفاتورة").AllowEditing(false);
        columns.AddFor(m => m.TotalAmount).Caption("اجمالي الفاتورة").AllowEditing(false);
        columns.AddFor(m => m.PaidUp).Caption("المدفوع من الفاتورة");
        columns.AddFor(m => m.Remainder).Caption("الباقي من المبلغ");
        columns.AddFor(m => m.SupplierId).Caption("اسم المورد").Lookup(lookup => lookup
          .DataSource(d => d.Mvc().Controller("Suppliers").LoadAction("LoadSuppliers"))
          .ValueExpr("SupplierId")
          .DisplayExpr("SupplierName"));
        columns.AddFor(m => m.BranchId).Caption("اسم الفرع").Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Branches").LoadAction("LoadBranches"))
       .ValueExpr("BranchId")
       .DisplayExpr("BranchName"));
       columns.AddFor(m => m.PaymentMethodId).Caption("طريقة الدفع").Lookup(lookup => lookup
        .DataSource(d => d.Mvc().Controller("PaymentMethods").LoadAction("LoadPaymentMethods"))
        .ValueExpr("PaymentMethodId")
        .DisplayExpr("PaymentMethodName"));
        columns.AddFor(m => m.PurchaseDate).Caption("تاريخ الفاتورة");
        columns.AddFor(m => m.UserId).Caption("مدخل الفاتورة").AllowEditing(false).Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Users").LoadAction("LoadUsers"))
       .ValueExpr("UserId")
       .DisplayExpr("UserName"));
    }).MasterDetail(md =>
    {
        md.Enabled(true);
        md.Template(@<text>
            @(Html.DevExtreme().DataGrid<PurchaseItemsModel>()
        .ColumnAutoWidth(true)
        .ShowBorders(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.ProductName).Caption("اسم المنتج");
            columns.AddFor(m => m.SizeName).Caption("المقاس");
            columns.AddFor(m => m.ColorName).Caption("اللون");
            columns.AddFor(m => m.Quantity).Caption("الكمية");
            columns.AddFor(m => m.BuyPrice).Caption("سعر الشراء للواحد");
        })
        .ColumnFixing(columnFixing =>{columnFixing.Enabled(true);})
        .DataSource(d => d.Mvc() 
        .Controller("PurchaseItems")
        .LoadAction("LoadPurchaseItemsByInvoiceId")
        .Key("PurchaseItemId")
        .DeleteAction("DeletePurchaseItem")
        .LoadParams(new { purchaseInvoiceId = new JS("data.PurchaseInvoiceId") }))
        .Editing(e => e
            .Mode(GridEditMode.Popup)
            .AllowDeleting(true)
        )
        .RtlEnabled(true)
        )
            </text>);
    })
    .ColumnFixing(columnFixing =>{columnFixing.Enabled(true);})
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
                .Column("رقم الفاتورة")
                .SummaryType(SummaryType.Count)
                .DisplayFormat("عدد الفواتير : {0}");

            items.Add()
            .Column("اجمالي الفاتورة")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي الفواتير : {0}");

            items.Add()
            .Column("المدفوع من الفاتورة")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي المدفوع : {0}");   
            
            items.Add()
           .Column("الباقي من المبلغ")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي المتبقي : {0}");
        })
    )
)*@
<script>
    $(function () {
        // Initial load of branches into the dropdown
        $.getJSON('/Branches/LoadBranches', function (data) {
            var branchSelect = $('#BranchId');
            $.each(data, function () {
                branchSelect.append($('<option/>').val(this.BranchId).text(this.BranchName));
            });
        });

        // Initialize the DataGrid
        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "PurchaseInvoiceId",
                load: function (loadOptions) {
                    var d = $.Deferred();
                    var params = { branchId: $('#BranchId').val() };

                    $.getJSON('/PurchaseInvoices/LoadPurchaseInvoicesByBranch', params)
                        .done(function (result) { d.resolve(result); })
                        .fail(function () { d.reject("Data Loading Error"); });

                    return d.promise();
                },
                onRowUpdating: function (e) {
                    var oldData = e.oldData;
                    var newData = e.newData;
                    e.newData = Object.assign({}, oldData, newData);
                },
                update: function (key, values) {
                    return $.ajax({
                        url: '/PurchaseInvoices/UpdatePurchaseInvoice',
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            ...values,
                            PurchaseInvoiceId: key,
                        })
                    });
                },
                remove: function (key) {
                    return $.ajax({
                        url: '/PurchaseInvoices/DeletePurchaseInvoice?invoiceId=' + encodeURIComponent(key),
                        method: 'DELETE'
                    });
                }
            }),
            onToolbarPreparing: onToolbarPreparing,
            selection: { mode: "multiple" },
            export: { enabled: true, allowExportSelectedData: true },
            onExporting: exporting,
            columnAutoWidth: true,
            editing: {
                mode: "popup",
                allowUpdating: true,
                allowDeleting: true,
                popup: {
                    title: "فاتورة مشتريات",
                    showTitle: true,
                    width: 800,
                    height: 700
                }
            },
            rtlEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            width: "100%",
            showBorders: true,
            columns: [
                {
                    dataField: "PurchaseInvoiceId",
                    caption: "رقم الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ"
                },
                {
                    dataField: "SupplierId",
                    caption: "اسم المورد",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "SupplierId",
                            loadUrl: "/Suppliers/LoadSuppliers"
                        }),
                        valueExpr: "SupplierId",
                        displayExpr: "SupplierName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "اسم الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "طريقة الدفع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "PurchaseDate",
                    caption: "تاريخ الفاتورة",
                    dataType: "date"
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتورة",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                }
            ],
            columnFixing: {
                enabled: true
            },
            masterDetail: {
                enabled: true,
                template: function (container, options) {
                    $("<div>")
                        .addClass("master-detail-grid")
                        .dxDataGrid({
                            columnAutoWidth: true,
                            showBorders: true,
                            columns: [
                                { dataField: "ProductName", caption: "اسم المنتج" },
                                { dataField: "SizeName", caption: "المقاس" },
                                { dataField: "ColorName", caption: "اللون" },
                                { dataField: "Quantity", caption: "الكمية" },
                                { dataField: "BuyPrice", caption: "سعر الشراء للواحد" }
                            ],
                            dataSource: new DevExpress.data.CustomStore({
                                load: function (loadOptions) {
                                    return $.getJSON('/PurchaseItems/LoadPurchaseItemsByInvoiceId', {
                                        purchaseInvoiceId: options.key
                                    });
                                }
                            })
                        }).appendTo(container);
                }
            }
        });

        // Change event for the Branch dropdown to reload the DataGrid
        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        toolbarItems.push({
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مشتريات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("PurchaseInvoicesPage", "PurchaseInvoices")';
                }
            },
            location: 'after'
        });
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('PurchaseInvoices');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PurchaseInvoices.xlsx');
            });
        });
    }
</script>