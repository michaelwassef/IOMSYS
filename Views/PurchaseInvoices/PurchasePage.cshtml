
@{
    ViewData["Title"] = "PurchaseInvoicesPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>فواتير المشتريات</h1>
</div>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>

<div class="row justify-content-center">
    <button type="button" onclick="returnProdutsPage()" class="btn col-md-2 btn-primary btn-block my-1 mx-1">كشف فواتير الموردين</button>
    <button id="showAllBtn" class="btn col-md-2 btn-primary btn-block my-1 mx-1" onclick="window.location.href='/PurchaseInvoices/PaymentsNotMade';">عرض المدفوعات المؤجله اليوم</button>
    <button id="showAllBtn" class="btn col-md-2 btn-primary btn-block my-1 mx-1" onclick="window.location.href='/PurchaseInvoices/AllPaymentsNotMade';">عرض جميع المدفوعات المؤجله</button>
</div>



<div id="gridContainer"></div>

<script>
        function returnProdutsPage() {
        window.location.href = '@Url.Action("SuppliersAccountPage", "Suppliers")';
    }

    $(function () {
        $.getJSON('/Branches/LoadBranchesByUser', function (data) {
            var branchSelect = $('#BranchId');
            $.each(data, function () {
                branchSelect.append($('<option/>').val(this.BranchId).text(this.BranchName));
            });
        });

        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "PurchaseInvoiceId",
                load: function (loadOptions) {
                    var d = $.Deferred();
                    var params = { branchId: $('#BranchId').val() };

                    $.getJSON('/PurchaseInvoices/LoadPurchaseInvoicesByBranch', params)
                        .done(function (result) { d.resolve(result); })
                        .fail(function () { d.reject("Data Loading Error"); });

                    return d.promise();
                },
                onRowUpdating: function (e) {
                    var oldData = e.oldData;
                    var newData = e.newData;

                    if (newData.PaidUp !== undefined) {
                        newData.Remainder = oldData.TotalAmount - newData.PaidUp;
                    }

                    e.newData = Object.assign({}, oldData, newData);
                },
                update: function (key, values) {
                    var url = '/PurchaseInvoices/UpdatePurchaseInvoice/' + encodeURIComponent(key);

                    // Construct the data object with a "values" property
                    var dataToSend = JSON.stringify({ values: values });

                    return $.ajax({
                        url: url,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: dataToSend
                    })
                        .done(function (response) {
                            // Success notification
                            DevExpress.ui.notify({ message: "Invoice updated successfully" }, "success", 3000);
                        })
                        .fail(function (jqXHR) {
                            // Error handling
                            var message = "Could not update invoice";
                            if (jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.ErrorMessage) {
                                message = jqXHR.responseJSON.ErrorMessage;
                            }
                            DevExpress.ui.notify({ message: message }, "error", 3000);
                        });
                },
                remove: function (key) {
                    return $.ajax({
                        url: '/PurchaseInvoices/DeletePurchaseInvoice?invoiceId=' + encodeURIComponent(key),
                        method: 'DELETE'
                    });
                }
            }),
            onToolbarPreparing: onToolbarPreparing,
            selection: { mode: "multiple" },
            export: { enabled: true, allowExportSelectedData: true },
            onExporting: exporting,
            columnAutoWidth: true,
            editing: {
                mode: "popup",
                allowUpdating: true,
                allowDeleting: true,
                popup: {
                    title: "فاتورة مشتريات",
                    showTitle: true,
                    width: 800,
                    height: 700
                }
            },
            rtlEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            width: "100%",
            showBorders: true,
            onRowUpdating: function (e) {
                var oldData = e.oldData;
                var newData = e.newData;

                var newPaidUp = newData.PaidUp !== undefined ? newData.PaidUp : oldData.PaidUp;
                var totalAmount = oldData.TotalAmount !== undefined ? oldData.TotalAmount : 0;

                var newRemainder = totalAmount - newPaidUp;
                newData.Remainder = newRemainder;
                e.newData = Object.assign({}, oldData, newData);
            },
            columns: [
                {
                    dataField: "PurchaseInvoiceId",
                    caption: "رقم الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ",
                    allowEditing: false,
                    calculateCellValue: function (rowData) {
                        return rowData.TotalAmount - rowData.PaidUp;
                    }
                },
                {
                    dataField: "SupplierId",
                    caption: "اسم المورد",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "SupplierId",
                            loadUrl: "/Suppliers/LoadSuppliers"
                        }),
                        valueExpr: "SupplierId",
                        displayExpr: "SupplierName"
                    }
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "طريقة الدفع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "PurchaseDate",
                    caption: "تاريخ الفاتورة",
                    dataType: "date"
                },
                {
                    dataField: "Notes",
                    caption: "ملاحظات"
                },
                {
                    dataField: "PaidUpDate",
                    caption: "تاريخ التحصيل",
                    dataType: "date"
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتورة",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "اسم الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
            ],
            summary: {
                totalItems: [
                    {
                        column: "PurchaseInvoiceId",
                        summaryType: "count",
                        displayFormat: "عدد الفواتير : {0}"
                    },
                    {
                        column: "TotalAmount",
                        summaryType: "sum",
                        displayFormat: "اجمالي مبلغ الفواتير : {0}"
                    },
                    {
                        column: "PaidUp",
                        summaryType: "sum",
                        displayFormat: "اجمالي المدفوع : {0}"
                    },
                    {
                        column: "Remainder",
                        summaryType: "sum",
                        displayFormat: "اجمالي المتبقي : {0}"
                    }
                ]
            },
            columnFixing: {
                enabled: true
            },
            headerFilter: {
                visible: true
                , allowSearch: true
            },
            masterDetail: {
                enabled: true,
                template: function (container, options) {
                $("<div>")
                    .addClass("master-detail-grid")
                    .dxDataGrid({
                        columnAutoWidth: true,
                        showBorders: true,
                        columns: [
                            { dataField: "ProductName", caption: "اسم المنتج" },
                            { dataField: "SizeName", caption: "المقاس" },
                            { dataField: "ColorName", caption: "اللون" },
                            { dataField: "Quantity", caption: "الكمية" },
                            { dataField: "UnitName", caption: "الوحدة" },
                            { dataField: "BuyPrice", caption: "سعر الشراء للواحد" }
                        ],
                        dataSource: new DevExpress.data.CustomStore({
                            load: function (loadOptions) {
                                return $.getJSON('/PurchaseItems/LoadPurchaseItemsByInvoiceId', {
                                    purchaseInvoiceId: options.key
                                });
                            }
                        })
                    }).appendTo(container);
                }
            }
        });

        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        toolbarItems.push({
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مشتريات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("PurchaseInvoicesPage", "PurchaseInvoices")';
                }
            },
            location: 'after'
        });
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('PurchaseInvoices');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PurchaseInvoices.xlsx');
            });
        });
    }
</script>