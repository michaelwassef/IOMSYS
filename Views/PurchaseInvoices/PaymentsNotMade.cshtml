
@{
    ViewData["Title"] = "PaymentsNotMade";
    Layout = "_DevExtremeLayout";
}

<h1>مدفوعات مؤجله</h1>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="paidUpDatePicker">تاريخ التحصيل</label>
        <div id="paidUpDatePicker"></div>
    </div>
</div>
<button id="showAllBtn" class="btn btn-primary mx-1" onclick="window.location.href='/PurchaseInvoices/AllPaymentsNotMade';">عرض جميع المدفوعات المؤجله</button>

<div id="gridContainer"></div>

<script>
    $(function () {
        $("#paidUpDatePicker").dxDateBox({
            type: "date",
            value: new Date(),
            displayFormat: "yyyy-MM-dd",
            onValueChanged: function () {
                $("#gridContainer").dxDataGrid("instance").refresh();
            }
        });

        $.getJSON('/Branches/LoadBranchesByUser', function (data) {
            var branchSelect = $('#BranchId');
            $.each(data, function () {
                branchSelect.append($('<option/>').val(this.BranchId).text(this.BranchName));
            });
            branchSelect.change(function () {
                $("#gridContainer").dxDataGrid("instance").refresh();
            });
        });

        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                load: function (loadOptions) {
                    var deferred = $.Deferred();
                    var paidUpDate = $("#paidUpDatePicker").dxDateBox("instance").option("value").toISOString().split('T')[0];
                    var branchId = $('#BranchId').val();
                    var url = '/PurchaseInvoices/LoadNotPaidPurchaseInvoicesByBranch?branchId=' + branchId + '&PaidUpDate=' + paidUpDate;

                    console.log('URL:', url);

                    $.getJSON(url)
                        .done(function (result) {
                            deferred.resolve(result);
                        })
                        .fail(function () {
                            deferred.reject("Data Loading Error");
                        });
                    return deferred.promise();
                },
            }),
            onToolbarPreparing: onToolbarPreparing,
            selection: { mode: "multiple" },
            export: { enabled: true, allowExportSelectedData: true },
            onExporting: exporting,
            columnAutoWidth: true,
            rtlEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            width: "100%",
            showBorders: true,
            columns: [
                {
                    dataField: "PurchaseInvoiceId",
                    caption: "رقم الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ"
                },
                {
                    dataField: "SupplierId",
                    caption: "اسم المورد",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "SupplierId",
                            loadUrl: "/Suppliers/LoadSuppliers"
                        }),
                        valueExpr: "SupplierId",
                        displayExpr: "SupplierName"
                    }
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "طريقة الدفع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "PurchaseDate",
                    caption: "تاريخ الفاتورة",
                    dataType: "date"
                },
                {
                    dataField: "Notes",
                    caption: "ملاحظات"
                },
                {
                    dataField: "PaidUpDate",
                    caption: "تاريخ التحصيل",
                    dataType: "date"
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتورة",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "اسم الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
            ],
            columnFixing: {
                enabled: true
            },
        });

        $('#BranchId ,paidUpDatePicker ').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        toolbarItems.push({
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مشتريات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("PurchaseInvoicesPage", "PurchaseInvoices")';
                }
            },
            location: 'after'
        });
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('PurchaseInvoices');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PurchaseInvoices.xlsx');
            });
        });
    }
</script>
