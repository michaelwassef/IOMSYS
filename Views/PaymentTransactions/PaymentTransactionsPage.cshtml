
@{
    ViewData["Title"] = "PaymentTransactionsPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>ادارة الخزنة</h1>
</div>

<div class="row">
    <div class="form-group col-md-2 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
    <div class="form-group col-md-2 mb-3">
        <div class="branch-treasury" id="branchTreasury">خزنة الفرع: <span id="treasuryValue">0</span></div>
    </div>
</div>

<div class="row justify-content-center">
   <button id="filterTodayBtn" class="btn col-md-3 btn-primary btn-block my-1 mx-1">عرض بيانات اليوم</button>
   <button id="showAllBtn" class="btn col-md-3 btn-primary btn-block my-1 mx-1">عرض جميع البيانات</button>
   <button onclick="movePayment()" class="btn col-md-3 btn-primary btn-block my-1 mx-1">تحويل النقديه</button>
</div>


<div id="movePaymentPopup" style="display:none;">
    <div>
        <form id="movePaymentForm">
            <div class="form-group">
                <label for="FromBranchId">من فرع:</label>
                <select id="fromBranch" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="FromPaymentMethodId">اختر خزنة:</label>
                <select id="fromPaymentMethodId" class="form-control"></select>
                <div id="availableAmountDisplay" class="text-primary mt-2"></div>
            </div>
            <div class="form-group">
                <label for="ToBranchId">إلى فرع:</label>
                <select id="toBranch" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="ToPaymentMethodId">اختر الخزنة:</label>
                <select id="toPaymentMethodId" class="form-control"></select>
@*                <div id="availableAmountDisplay2" class="text-primary mt-2"></div>
*@            </div>
            <div class="form-group">
                <label for="Amount">المبلغ المحول:</label>
                <input type="number" id="amount" class="form-control" min="1" required>
            </div>
            <div class="form-group mb-3">
                <label for="Notes">ملاحظات</label>
                <input type="text" id="notes" class="form-control" />
            </div>
            <button class="btn btn-primary mx-1" id="addTransferItemButton">إضافة</button>
            <div>
                <div id="transferGrid" class="my-3"></div>
            </div>
            <div class="my-3">
                <button type="button" class="btn btn-secondary mx-3" onclick="closePopup()">إغلاق</button>
                <button type="button" class="btn btn-success" onclick="moveInventory()">تأكيد التحويل</button>
            </div>
        </form>
    </div>
</div>

@(Html.DevExtreme().DataGrid<TransactionDetailModel>()
    .ID("gridContainer")
.Selection(s => s.Mode(SelectionMode.Multiple))
     .Export(e => e.Enabled(true).AllowExportSelectedData(true))
     .OnExporting("exporting")
     .AllowColumnResizing(true)
     .ColumnAutoWidth(true)
    .Editing(e => e
        .Mode(GridEditMode.Popup)
       .AllowAdding(true)
       .AllowUpdating(true)
       .AllowDeleting(true)
        .Popup(p => p
                .Title("بيانات المعاملة")
                .ShowTitle(true)
                .Width(700)
                .Height(450))
    )
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.TransactionId).Caption("كود العملية").AllowEditing(false);
        columns.AddFor(m => m.InvoiceType).Caption("اسم العملية");
        columns.AddFor(m => m.InvoiceId).Caption("رقم الفاتورة").AllowEditing(false);
        columns.AddFor(m => m.BranchId).Caption("اسم الفرع").Lookup(lookup => lookup
          .DataSource(d => d.Mvc().Controller("Branches").LoadAction("LoadBranches"))
          .ValueExpr("BranchId")
          .DisplayExpr("BranchName")); ;
        columns.AddFor(m => m.PaymentMethodId).Caption("الخزنة").Lookup(lookup => lookup
        .DataSource(d => d.Mvc().Controller("PaymentMethods").LoadAction("LoadPaymentMethods"))
        .ValueExpr("PaymentMethodId")
        .DisplayExpr("PaymentMethodName"));
        columns.AddFor(m => m.TransactionType).Caption("نوع المعاملة").AllowEditing(false);
        columns.AddFor(m => m.TransactionDate).Caption("تاريخ المعاملة");
        columns.AddFor(m => m.Amount).Caption("القيمة");
        columns.AddFor(m => m.Details).Caption("ملاحظات");
        columns.AddFor(m => m.EntityName).Caption("خاص ب").AllowEditing(false);
        columns.AddFor(m => m.ModifiedDate).Caption("تاريخ الادخال").AllowEditing(false);
        columns.AddFor(m => m.ModifiedUser).Caption("مدخل البيانات").AllowEditing(false).Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Users").LoadAction("LoadUsers"))
       .ValueExpr("UserId")
       .DisplayExpr("UserName"));
    })
    .ColumnFixing(columnFixing =>{columnFixing.Enabled(true);})
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
                .Column("القيمة")
                .SummaryType(SummaryType.Sum)
                .DisplayFormat("الاجمالي : {0}");
        })
    )
)

<script>
    function movePayment() {
        $("#movePaymentPopup").dxPopup("show");
        populateDropdown('/Branches/LoadBranchesByUser', 'fromBranch', 'BranchId', 'BranchName');
        populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'fromPaymentMethodId', 'PaymentMethodId', 'PaymentMethodName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'toPaymentMethodId', 'PaymentMethodId', 'PaymentMethodName');
        initializeItemsGrid();
    }

    async function populateDropdown(url, elementId, valueField, textField, prevSelectedValue) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                selectElement.empty();
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.append(option);
                });

                if (prevSelectedValue && selectElement.find(`option[value="${prevSelectedValue}"]`).length > 0) {
                    selectElement.val(prevSelectedValue).trigger('change');
                } else {
                    selectElement.val(null).trigger('change'); 
                }

                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error populating dropdown:', error);
        }
    }

    async function fetchAvailableQuantity(paymentMethodId, branchId, displayElement) {
        try {
            const response = await fetch(`/PaymentTransactions/GetAccountBalanceByPaymentMethodIdAndBranchId?BranchId=${branchId}&PaymentMethodId=${paymentMethodId}`);
            const data = await response.json();
            $(displayElement).text(`المبلغ المتاح: ${data}`);
        } catch (error) {
            $(displayElement).text(`المبلغ المتاح: 0`);
        }
    }

    window.closePopup = function () {
        $("#movePaymentPopup").dxPopup("hide");
        transferItems = [];
        $('#availableAmountDisplay').val('');
        $('#availableAmountDisplay2').val('');
    };

    $(function () {
        var moveInventoryPopup = $("#movePaymentPopup").dxPopup({
            title: "تحويل نقدية",
            visible: false,
            width: calculatePopupWidth(),
            height: calculatePopupHeight(),
        }).dxPopup("instance");

        function calculatePopupWidth() {
            var windowWidth = $(window).width();

            if (windowWidth < 768) {
                return "90%";
            } else {
                return 750;
            }
        }

        function calculatePopupHeight() {
            var windowHeight = $(window).height();
            if (windowHeight < 768) {
                return "90%";
            } else {
                return 500;
            }
        }

        $(window).resize(function () {
            moveInventoryPopup.option({
                width: calculatePopupWidth(),
                height: calculatePopupHeight()
            });
        });
    });

    var transferItems = [];
    
    function initializeItemsGrid() {
        $("#transferGrid").dxDataGrid({
            dataSource: transferItems,
            columns: [
                { dataField: "FromBranchId", caption: "من فرع" ,
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); } }, valueExpr: "BranchId", displayExpr: "BranchName" }
                },
                { dataField: "FromPaymentMethodId", caption: "من خزنة" ,
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/PaymentMethods/LoadPaymentMethods", dataType: "json" }); } }, valueExpr: "PaymentMethodId", displayExpr: "PaymentMethodName" }
                },
                { dataField: "ToBranchId", caption: "الي فرع",
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); }}, valueExpr: "BranchId", displayExpr: "BranchName" }
                },
                { dataField: "ToPaymentMethodId", caption: "الي خزنة" ,
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/PaymentMethods/LoadPaymentMethods", dataType: "json" }); } }, valueExpr: "PaymentMethodId", displayExpr: "PaymentMethodName" }
                },
                { dataField: "Amount", caption: "المبلغ المحول" }
            ],
            columnAutoWidth: true,
            width: "100%",
            rtlEnabled: true,
        });
    }

    document.addEventListener('DOMContentLoaded', async function () {
        $('#toBranch, #toPaymentMethodId').change(function () {
            var toBranchId = $('#toBranch').val();
            var toPaymentMethodId = $('#toPaymentMethodId').val();
            if (toPaymentMethodId && toBranchId) {
                fetchAvailableQuantity(toPaymentMethodId, toBranchId, '#availableAmountDisplay2');
            }
        });
        $('#fromBranch, #fromPaymentMethodId').change(function () {
            var fromBranchId = $('#fromBranch').val();
            var fromPaymentMethodId = $('#fromPaymentMethodId').val();
            if (fromPaymentMethodId && fromBranchId) {
                fetchAvailableQuantity(fromPaymentMethodId, fromBranchId, '#availableAmountDisplay');
            }
        });
    });

    document.addEventListener('DOMContentLoaded', (event) => {
        document.getElementById('addTransferItemButton').addEventListener('click', addItemToTransferList);
    });

    async function addItemToTransferList(event) {
        event.preventDefault();

        var item = {
            FromBranchId: $('#fromBranch').val(),
            FromPaymentMethodId: $('#fromPaymentMethodId').val(),
            ToBranchId: $('#toBranch').val(),
            ToPaymentMethodId: $('#toPaymentMethodId').val(),
            Amount: parseInt($('#amount').val(), 10),
            Notes: $('#notes').val()
        };

        // Check if the destination is the same as the source
        if (item.FromBranchId === item.ToBranchId && item.FromPaymentMethodId === item.ToPaymentMethodId) {
            DevExpress.ui.notify("لا يمكن نقل النقدية لنفس الخزنة...اختر خزنة أخرى", "error", 3000);
            return;
        }

        // Perform validation
        if (!validateTransferItem(item)) {
            DevExpress.ui.notify("برجاء ملاء جميع البيانات وتاكد من المبلغ المرسل اكبر من 0", "error", 3000);
            return;
        }

        // Check if the amount being transferred exceeds the available balance
        try {
            const availableBalanceResponse = await fetch(`/PaymentTransactions/GetAccountBalanceByPaymentMethodIdAndBranchId?BranchId=${item.FromBranchId}&PaymentMethodId=${item.FromPaymentMethodId}`);
            if (!availableBalanceResponse.ok) {
                DevExpress.ui.notify("لا يمكن نقل نقدية اكبر من الرصيد المتاح", "error", 3000);
                return;
            }

            const availableBalance = await availableBalanceResponse.json();
            if (item.Amount > availableBalance) {
                DevExpress.ui.notify("المبلغ الذي تريد نقله اكبر من رصيد الخزنة", "error", 3000);
                return;
            }

        } catch (error) {
            DevExpress.ui.notify(error, "error", 3000);
            return;
        }

        transferItems.push(item);
        displayTransferItems();
        clearTransferForm();
    };

    function validateTransferItem(item) {
        return item.FromBranchId && item.ToBranchId && item.FromPaymentMethodId && item.ToPaymentMethodId && item.Amount && !isNaN(item.Amount) && item.Amount > 0;
    }

    function displayTransferItems() {
        $("#transferGrid").dxDataGrid("instance").option('dataSource', transferItems);
    }

    function clearTransferForm() {
        $('#fromBranch').val('').trigger('change');
        $('#fromPaymentMethodId').val('').trigger('change');
        $('#toBranch').val('').trigger('change');
        $('#toPaymentMethodId').val('').trigger('change');
        $('#amount').val('');
        $('#notes').val('');
    }

    async function moveInventory() {
        $('#loadingIndicator').show();
        if (transferItems.length === 0) {
            DevExpress.ui.notify("برجاء اضافة عمليه واحده علي الاقل","error", 3000);
            $('#loadingIndicator').hide();
            return;
        }

        const payload = {
            Items: transferItems.map(item => ({
                FromBranchId: item.FromBranchId,
                FromPaymentMethodId: item.FromPaymentMethodId,
                ToBranchId: item.ToBranchId,
                ToPaymentMethodId: item.ToPaymentMethodId,
                Amount: item.Amount,
                Notes: item.Notes,
            }))
        };

        try {
            const response = await fetch('/PaymentTransactions/MoveBalance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const responseData = await response.json();

            if (!responseData.success) {
                DevExpress.ui.notify(responseData.message, "error", 3000);
                $('#loadingIndicator').hide();
                return;
            }

            DevExpress.ui.notify(responseData.message, "success", 3000);
            transferItems = [];
            displayTransferItems();
            $('#loadingIndicator').hide();
        } catch (error) {
            DevExpress.ui.notify(error, "error", 3000);
            $('#loadingIndicator').hide();
        }
    }

    ///////////////////////////////////////////////////
    function toIsoDateString(date) {
        return date.toISOString().split('T')[0];
    }

    document.getElementById('filterTodayBtn').addEventListener('click', function () {
        var gridInstance = $("#gridContainer").dxDataGrid("instance");
        var today = new Date();
        var todayStart = new Date(today.setHours(0, 0, 0, 0));
        var todayEnd = new Date(today.setHours(23, 59, 59, 999));
        gridInstance.filter(["InvoiceDate", ">=", todayStart], "and", ["InvoiceDate", "<=", todayEnd]);
    });

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Branches');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Branches.xlsx');
            });
        });
    }

    $(function () {
        (async function () {
            try {
                const branchesResponse = await fetch('/Branches/LoadBranchesByUser');
                if (!branchesResponse.ok) {
                    throw new Error('Failed to load branches data');
                }
                const branchesData = await branchesResponse.json();
                populateDropdownData(branchesData);

                if (branchesData.length > 0) {
                    await fetchBranchAccountBalance(branchesData[0]['BranchId']);
                    const defaultBranchId = branchesData[0]['BranchId'];
                    const loadUrl = `/PaymentTransactions/LoadDeitalsPaymentTransactionsByBranch?branchId=${defaultBranchId}`;
                    loadSalesInvoices(loadUrl);
                }

                $('#BranchId').change(async function () {
                    const branchId = $(this).val();
                    const loadUrl = `/PaymentTransactions/LoadDeitalsPaymentTransactionsByBranch?branchId=${branchId}`;
                    loadSalesInvoices(loadUrl);
                    await fetchBranchAccountBalance(branchId);
                });
            } catch (error) {
                console.error('Error loading data:', error);
            }

            $("#showAllBtn").click(function () {
                const dataGrid = $("#gridContainer").dxDataGrid("instance");
                dataGrid.clearFilter();
            });
        })();
    });

    async function fetchBranchAccountBalance(branchId) {
        try {
            const response = await fetch(`/PaymentTransactions/GetBranchAccountBalance?BranchId=${branchId}`);
            if (!response.ok) {
                console.error('Failed to load payment transactions data');
                return;
            }
            const accountBalance = await response.json();
            document.getElementById('branchTreasury').innerText = `خزنة الفرع: ${accountBalance} ج.م`;
        } catch (error) {
            console.error('Error fetching branch account balance:', error);
        }
    }

    function populateDropdownData(data) {
        const selectElement = document.getElementById('BranchId');
        selectElement.innerHTML = '';
        data.forEach(item => {
            const option = new Option(item['BranchName'], item['BranchId']);
            selectElement.add(option);
        });
    }

    async function updateGridDataSource(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Failed to load data');
            }
            const data = await response.json();
            $("#gridContainer").dxDataGrid("instance").option("dataSource", data);
        } catch (error) {
            console.error('Error updating grid data:', error);
        }
    }

    async function loadSalesInvoices(url) {
        try {
            const gridInstance = $("#gridContainer").dxDataGrid("instance");
            gridInstance.option("dataSource", {
                store: new DevExpress.data.CustomStore({
                    key: "TransactionId",
                    load: () => fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to load data');
                            }
                            return response.json();
                        }),
                    insert: values => $.ajax({
                        url: '/PaymentTransactions/AddNewPaymentTransaction',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(values)
                    }).then(() => gridInstance.refresh()),
                    update: (key, values) => $.ajax({
                        url: `/PaymentTransactions/UpdatePaymentTransaction?id=${key}`,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(values)
                    }).then(() => gridInstance.refresh()),
                    remove: key => $.ajax({
                        url: `/PaymentTransactions/DeletePaymentTransaction?transactionId=${key}`,
                        method: 'DELETE'
                    }).then(() => gridInstance.refresh())
                })
            });
        } catch (error) {
            console.error('Error setting up sales invoices grid:', error);
        }
    }
</script>

<style>
    .branch-treasury {
        background-color: #f0f0f0;
        border: 1px solid #d3d3d3;
        padding: 18px;
        margin-top: 18px;
        font-size: 18px;
        border-radius: 8px;
        width: auto;
        max-width: 100%;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

        .branch-treasury #treasuryValue {
            font-weight: bold;
            color: #007bff;
        }


    .select2-container--open {
        z-index: 9999999 !important;
    }
</style>
