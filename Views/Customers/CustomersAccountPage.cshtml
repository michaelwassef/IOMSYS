@{
    ViewData["Title"] = "CustomersAccountPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>كشف فواتير العملاء</h1>
</div>

<div class="dashboard-container">
    <div class="dashboard-item supplier-select">
        <label for="BranchId" class="dashboard-label">اسم العميل</label>
        <select id="BranchId" class="dashboard-select"></select>
    </div>
    <div class="dashboard-item dashboard-summary total-invoices">
        <div class="summary-title">اجمالي الفواتير</div>
        <div class="summary-value" id="totalInvoicesSum">0</div>
    </div>
    <div class="dashboard-item dashboard-summary total-paidup">
        <div class="summary-title">اجمالي المدفوع</div>
        <div class="summary-value" id="totalPaidUpSum">0</div>
    </div>
    <div class="dashboard-item dashboard-summary total-remainder">
        <div class="summary-title">اجمالي المتبقي</div>
        <div class="summary-value" id="totalRemainderSum">0</div>
    </div>
    <div class="dashboard-container">
        <button id="openPaidUpPopup" class="btn btn-primary">تحصيل من عميل</button>
    </div>
</div>

<div id="paidUpPopup" class="popup-container" style="display: none;">
    <div class="popup-content">
        <span class="close-popup">&times;</span>
        <h2>تحصيل من عميل</h2>
        <form id="paidUpForm">
            <div class="form-group">
                <label for="supplierSelect">اسم العميل:</label>
                <select id="supplierSelect" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="branchSelectPopup">اسم الفرع:</label>
                <select id="branchSelectPopup" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="branchSelectPopup">الخزنة:</label>
                <select id="PaymentMethodSelectPopup" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="amountInput">المبلغ:</label>
                <input type="number" id="amountInput" class="form-control" step="0.01" />
            </div>
            <button type="submit" class="btn btn-success">تحصيل</button>
            <button type="button" class="close-popup btn btn-danger">اغلاق</button>
        </form>
    </div>
</div>

<div id="gridContainer"></div>

<script>
    $('#openPaidUpPopup').click(function () {
        populateDropdowns();
        $('#paidUpPopup').show();
    });

    $('.close-popup').click(function () {
        $('#paidUpPopup').hide();
    });

    $('#paidUpForm').submit(function (e) {
        e.preventDefault();
        var supplierId = $('#supplierSelect').val();
        var branchId = $('#branchSelectPopup').val();
        var paymentMethodId = $('#PaymentMethodSelectPopup').val();
        var amount = $('#amountInput').val();

        if (!supplierId || !branchId || !paymentMethodId || !amount) {
            DevExpress.ui.notify("برجاء ملاء البيانات", "error", 5000);
            return;
        }

        if (amount < 0) {
            DevExpress.ui.notify("يجب ان يكون المبلغ اكبر من 0", "error", 5000);
            return;
        }

        $('#loadingIndicator').show();

        $.ajax({
            url: '@Url.Action("CustomerPaidUp", "InventoryMovement")',
            type: 'POST',
            data: { CustomerId: supplierId, BranchId: branchId, PaymentMethodId: paymentMethodId, Amount: amount },
            success: function (response) {
                DevExpress.ui.notify(response.message, "success", 5000);
                $('#paidUpPopup').hide();
                $('#supplierSelect').val('');
                $('#branchSelectPopup').val('');
                $('#PaymentMethodSelectPopup').val('');
                $('#amountInput').val('');
                refresh();
                $('#loadingIndicator').hide();
            },
            error: function (error) {
                DevExpress.ui.notify(error.responseJSON.message, "error", 5000);
                $('#loadingIndicator').hide();
            }
        });
    });

    function populateDropdowns() {
        populateDropdown('/Branches/LoadBranchesByUser', 'branchSelectPopup', 'BranchId', 'BranchName');
        populateDropdown('/Customers/LoadCustomers', 'supplierSelect', 'CustomerId', 'CustomerName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'PaymentMethodSelectPopup', 'PaymentMethodId', 'PaymentMethodName');
    }

    async function populateDropdown(url, elementId, valueField, textField, prevSelectedValue) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                selectElement.empty();

                // Check if data is not empty
                if (data.length > 0) {
                    data.forEach(item => {
                        const option = new Option(item[textField], item[valueField]);
                        selectElement.append(option);
                    });

                    // Determine if a previous value is selected or not
                    const hasPrevSelectedValue = prevSelectedValue && selectElement.find(`option[value="${prevSelectedValue}"]`).length > 0;

                    if (hasPrevSelectedValue) {
                        // Set to previous value if valid
                        selectElement.val(prevSelectedValue).trigger('change');
                    } else {
                        // Set to first option value by default if previous value is not valid or not provided
                        selectElement.val(data[0][valueField]).trigger('change');
                    }
                } else {
                    // If data is empty, trigger change to ensure any dependent logic is correctly handled
                    selectElement.trigger('change');
                }

                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error populating dropdown:', error);
        }
    }

    function updateSupplierSums(customersId) {
        $.getJSON('/Customers/LoadCustomerSums', { CustomerId: customersId }, function (data) {
            var totalInvoicesSum = data.TotalAmountSum !== null ? data.TotalAmountSum.toFixed(2) : '0.00';
            var totalPaidUpSum = data.PaidUpSum !== null ? data.PaidUpSum.toFixed(2) : '0.00';
            var totalRemainderSum = data.RemainderSum !== null ? data.RemainderSum.toFixed(2) : '0.00';

            $('#totalInvoicesSum').text(totalInvoicesSum);
            $('#totalPaidUpSum').text(totalPaidUpSum);
            $('#totalRemainderSum').text(totalRemainderSum);
        });
    }

    updateSupplierSums($('#BranchId').val());

    $('#BranchId').change(function () {
        updateSupplierSums($(this).val());
    });

    $(function () {
        populateDropdown('/Customers/LoadCustomers', 'BranchId', 'CustomerId', 'CustomerName');

        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "SalesInvoiceId",
                load: function (loadOptions) {
                    var d = $.Deferred();
                    var params = { CustomerId: $('#BranchId').val() };

                    $.getJSON('/Customers/LoadCustomersAccount', params)
                        .done(function (result) { d.resolve(result); })
                        .fail(function () { d.reject("Data Loading Error"); });

                    return d.promise();
                }
            }),
            onToolbarPreparing: onToolbarPreparing,
            selection: { mode: "multiple" },
            export: { enabled: true, allowExportSelectedData: true },
            onExporting: exporting,
            columnAutoWidth: true,
            rtlEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            width: "100%",
            showBorders: true,
            columns: [
                {
                    dataField: "SalesInvoiceId",
                    caption: "رقم الفاتورة"
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة بعد الخصم"
                },
                {
                    dataField: "TotalDiscount",
                    caption: "اجمالي الخصم"
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ"
                },
                {
                    dataField: "CustomerId",
                    caption: "اسم العميل",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "CustomerId",
                            loadUrl: "/Customers/LoadCustomers"
                        }),
                        valueExpr: "CustomerId",
                        displayExpr: "CustomerName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
                {
                    dataField: "Notes",
                    caption: "ملاحظات"
                },
                {
                    dataField: "SaleDate",
                    caption: "تاريخ الفاتوره",
                    dataType: "date"
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "الخزنة",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتوره",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                },
            ],
            summary: {
                totalItems: [
                    {
                        column: "SalesInvoiceId",
                        summaryType: "count",
                        displayFormat: "عدد الفواتير : {0}"
                    },
                    {
                        column: "TotalAmount",
                        summaryType: "sum",
                        displayFormat: "اجمالي مبلغ الفواتير : {0}"
                    },
                    {
                        column: "PaidUp",
                        summaryType: "sum",
                        displayFormat: "اجمالي المدفوع : {0}"
                    },
                    {
                        column: "Remainder",
                        summaryType: "sum",
                        displayFormat: "اجمالي المتبقي : {0}"
                    }
                ]
            },
            columnFixing: {
                enabled: true
            },
            masterDetail: {
                enabled: true,
                template: function (container, options) {
                    $("<div>")
                        .addClass("master-detail-grid")
                        .dxDataGrid({
                            columnAutoWidth: true,
                            showBorders: true,
                            columns: [
                                { dataField: "ProductName", caption: "اسم المنتج" },
                                { dataField: "SizeName", caption: "المقاس" },
                                { dataField: "ColorName", caption: "اللون" },
                                { dataField: "Quantity", caption: "الكمية" },
                                { dataField: "UnitName", caption: "الوحدة" },
                                { dataField: "SellPrice", caption: "سعر البيع للواحد" },
                                { dataField: "ItemDiscount", caption: "مبلغ الخصم للواحد" }
                            ],
                            dataSource: new DevExpress.data.CustomStore({
                                load: function (loadOptions) {
                                    return $.getJSON('/SalesItems/LoadSaleItemsByInvoiceId', {
                                        purchaseInvoiceId: options.key
                                    });
                                }
                            })
                        }).appendTo(container);
                }
            }
        });

        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });

    function refresh() {
        populateDropdown('/Customers/LoadCustomers', 'BranchId', 'CustomerId', 'CustomerName');
        $("#gridContainer").dxDataGrid("instance").refresh();
        updateSupplierSums($('#BranchId').val());
    }

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        toolbarItems.push({
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مبيعات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                }
            },
            location: 'after'
        });
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('PurchaseInvoices');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PurchaseInvoices.xlsx');
            });
        });
    }
</script>
<style>
    :root {
        --bg-color: #f0f4f8;
        --primary-color: #007bff;
        --info-color: #17a2b8;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --text-color: #333;
        --border-radius: 10px;
    }

    .dashboard-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 20px;
        padding: 20px;
        background-color: var(--bg-color);
    }

    .dashboard-item {
        background: white;
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .supplier-select {
        grid-column: span 2;
    }

    .dashboard-select, .dashboard-label {
        width: 100%;
        display: block;
        margin-bottom: 10px;
    }

    .summary-title {
        color: var(--text-color);
        font-size: 1rem;
        margin-bottom: 5px;
    }

    .summary-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .total-invoices .summary-value {
        color: var(--primary-color);
    }

    .total-paidup .summary-value {
        color: var(--success-color);
    }

    .total-remainder .summary-value {
        color: var(--danger-color);
    }

</style>
<link rel="stylesheet" href="~/css/site.css">