@{
    ViewData["Title"] = "WarehouseMovementsPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>تحركات المخزن</h1>
</div>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="BranchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="fromDate">من تاريخ</label>
        <div id="fromDate"></div>
    </div>
    <div class="form-group col-md-3 mb-3">
        <label for="toDate">الي تاريخ</label>
        <div id="toDate"></div>
    </div>
</div>

<div id="gridContainer"></div>

<script>
    $(function () {
        initializeDateBoxes();
        loadBranchesAndGridData();

        $('#BranchId').change(function () {
            const branchId = $(this).val();
            loadGridData(branchId);
        });

        function initializeDateBoxes() {
            const today = new Date();

            const endOfToday = new Date(today);
            endOfToday.setHours(23, 59, 59, 999);
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);         

            $("#fromDate").dxDateBox({
                type: "date",
                value: today,
                displayFormat: "yyyy-MM-dd",
                onValueChanged: function () {
                    refreshGridDataBasedOnDateChange();
                }
            });

            $("#toDate").dxDateBox({
                type: "date",
                value: tomorrow,
                displayFormat: "yyyy-MM-dd",
                onValueChanged: function () {
                    refreshGridDataBasedOnDateChange();
                }
            });
        }

        function refreshGridDataBasedOnDateChange() {
            const branchId = $('#BranchId').val();
            if (branchId) {
                loadGridData(branchId);
            }
        }

        function loadBranchesAndGridData() {
            fetch('/Branches/LoadBranchesByUser')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('BranchId');
                    data.forEach(branch => {
                        let option = new Option(branch.BranchName, branch.BranchId);
                        select.add(option);
                    });
                    if (data.length > 0) {
                        loadGridData(data[0].BranchId);
                    }
                })
                .catch(error => console.error('Unable to load branches.', error));
        }

        function loadGridData(branchId) {
            const fromDate = $("#fromDate").dxDateBox("instance").option("value").toISOString().split('T')[0];
            const toDate = $("#toDate").dxDateBox("instance").option("value").toISOString().split('T')[0];

            $("#gridContainer").dxDataGrid({
                dataSource: new DevExpress.data.CustomStore({
                    key: "ID",
                    load: () => fetchData(branchId, fromDate, toDate),
                    remove: (key) => removeItem(key)
                }),
                selection: { mode: "multiple" },
                export: { enabled: true, allowExportSelectedData: true },
                onExporting: exporting,
                columnAutoWidth: true,
                width: "100%",
                allowColumnResizing: true,
                rtlEnabled: true,
                paging: { pageSize: 10 },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 25, 50, 100]
                },
                searchPanel: { visible: true, highlightCaseSensitive: true },
                groupPanel: { visible: false },
                headerFilter: {
                    visible: true
                    , allowSearch: true
                },
                showBorders: true,
                columns: [
                    { dataField: "ProductId", caption: "كود المنتج" },
                    { dataField: "ProductName", caption: "اسم المنتج" },
                    { dataField: "SizeName", caption: "المقاس" },
                    { dataField: "ColorName", caption: "اللون" },
                    { dataField: "CategoryName", caption: "التصنيف" },
                    { dataField: "ProductTypeName", caption: "نوع المنتج" },
                    { dataField: "RecordType", caption: "العملية" },
                    { dataField: "Quantity", caption: "الكمية المدخلة"},
                    { dataField: "UnitName", caption: "الوحدة" },
                    { dataField: "Notes", caption: "ملاحظات" },
                    { dataField: "DateAdded", caption: "تاريخ الادخال", dataType: "datetime", format: "yyyy-MM-dd h:mm a"},
                    { dataField: "UserName", caption: "المدخل" }
                ],
                onRowPrepared: onRowPrepared
            });
        }

        function onRowPrepared(e) {
            if (e.rowType === 'data') {
                var quantity = e.data.Quantity;
                if (quantity < 0) {
                    e.rowElement.addClass('negative-quantity');
                } else if (quantity > 0) {
                    e.rowElement.addClass('positive-quantity');
                }
            }
        }

        function fetchData(branchId, fromDate, toDate) {
            return fetch(`/Products/GetAllWarehouseMovementsByBranch?branchId=${branchId}&fromDate=${fromDate}&toDate=${toDate}`)
                .then(response => response.json())
                .catch(() => { throw 'Data loading error'; });
        }

        function removeItem(key) {
            return fetch(`/Products/DeleteInventoryItem?id=${key}`, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) throw 'Delete operation failed';
                });
        }
       
        function exporting(e) {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Products');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(() => {
                workbook.xlsx.writeBuffer().then((buffer) => {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'WarehouseMovements.xlsx');
                });
            });
        }
    });
</script>
<style>
    .negative-quantity {
        background-color: #FFCCCC;
    }
    .positive-quantity {
        background-color: #CCFFCC;
    }
</style>