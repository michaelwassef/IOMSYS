@{
    ViewData["Title"] = "المنتجات";
    Layout = "_DevExtremeLayout";
}

<h1>بيانات المنتجات</h1>
<div>
    <button class="btn btn-primary mx-1" onclick="showProductDetailsPopup()"> اضافة كميات للفروع </button>
    <button class="btn btn-primary mx-1" onclick="showMoveInventoryPopup()"> نقل كميات للفروع</button>
</div>


@(Html.DevExtreme().DataGrid<ProductsModel>()
    .ID("gridContainer")
    .DataSource(d => d.Mvc().Controller("Products").LoadAction("LoadProducts").InsertAction("AddNewProduct").UpdateAction("UpdateProduct").DeleteAction("DeleteProduct").Key("ProductId"))
    .OnToolbarPreparing("onToolbarPreparing")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .ColumnAutoWidth(true)
    .AllowColumnResizing(true)
    .Editing(e => e.Mode(GridEditMode.Popup).AllowAdding(true).AllowUpdating(true).AllowDeleting(true).Popup(p => p.Title("بيانات المنتج الاساسية").ShowTitle(true).Width(800).Height(705)))
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p.ShowPageSizeSelector(true).AllowedPageSizes(new[] { 10, 25, 50, 100 }))
    .SearchPanel(s => s.Visible(true).HighlightCaseSensitive(true))
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.ProductId).Caption("كود المنتج");
        columns.AddFor(m => m.ProductName).Caption("اسم المنتج");
        columns.AddFor(m => m.BuyPrice).Caption("سعر شراء المنتج");
        columns.AddFor(m => m.SellPrice).Caption("سعر بيع المنتج");
        columns.AddFor(m => m.TotalQuantity).Caption("الكمية المتوفرة").AllowEditing(false);
        columns.AddFor(m => m.MinQuantity).Caption("أقل عدد");
        columns.AddFor(m => m.MaxDiscount).Caption("اقصي قيمة خصم");
        columns.AddFor(m => m.Notes).Caption("ملاحظات");
        columns.AddFor(m => m.CategoryId).Caption("التصنيف").Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("Categories").LoadAction("LoadCategories")).ValueExpr("CategoryId").DisplayExpr("CategoryName"));
        columns.AddFor(m => m.ProductTypeId).Caption("النوع").Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("ProductTypes").LoadAction("LoadProductTypes")).ValueExpr("ProductTypeId").DisplayExpr("ProductTypeName"));
       @* columns.AddFor(m => m.ProductPhoto).Caption("صورة المنتج").EditCellTemplate(@<text>
            @(Html.DevExtreme().FileUploader().ID("fileUploader").SelectButtonText("اختر صورة المنتج").Accept("image/*"))
            </text>);*@
    })
    .ColumnFixing(columnFixing => { columnFixing.Enabled(true); })
    .HeaderFilter(f => f.Visible(true))
)

<div id="productDetailsPopup" style="display:none;">
    <div class="row">
        <div class="form-group mb-3">
            <label for="ProductId">اسم المنتج</label>
            <select id="ProductId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="SizeId">المقاس</label>
            <select id="SizeId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="ColorId">اللون</label>
            <select id="ColorId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="BranchId">اسم الفرع</label>
            <select id="BranchId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="Quantity">الكمية</label>
            <input type="number" id="Quantity" class="form-control" min="0" required />
        </div>
        <div class="form-group mb-3">
            <label for="Notes">ملاحظات</label>
            <input type="text" id="Notes" class="form-control" required />
        </div>
        <div class="form-group mb-3">
            <button type="button" class="btn btn-primary mx-3" onclick="addItemToGrid()">إضافة</button>
        </div>
        <div>
            <div id="invoiceItemsGrid" class="my-3"></div>
        </div>
    </div>

    <div class="mb-3" id="alertPlaceholder"></div>

    <div class="my-3">
        <button type="button" class="btn btn-secondary mx-3" onclick="closePopup()">إغلاق</button>
        <button type="button" class="btn btn-success" onclick="saveInvoice()">حفظ</button>
    </div>

</div>

<div id="moveInventoryPopup" style="display:none;">
    <div>
        <form id="moveInventoryForm">
            <div class="form-group">
                <label for="fromBranch">من فرع:</label>
                <select id="fromBranch" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="toBranch">إلى فرع:</label>
                <select id="toBranch" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="productId">المنتج:</label>
                <select id="productId" class="form-control" onchange="productChanged()"></select>
            </div>
            <div class="form-group">
                <label for="sizeId">المقاس:</label>
                <select id="sizeId" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="colorId">اللون:</label>
                <select id="colorId" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="quantity">الكمية:</label>
                <input type="number" id="quantity" class="form-control" min="1" required>
            </div>
            <div class="my-3">
                <button type="button" class="btn btn-secondary mx-3" onclick="closePopup2()">إغلاق</button>
                <button type="button" class="btn btn-success" onclick="moveInventory()">تأكيد النقل</button>
            </div>
        </form>
    </div>
</div>

<script>
    window.closePopup2 = function () {
        $("#moveInventoryPopup").dxPopup("hide");
    };

    //////////
    // Generic function to populate a dropdown from an endpoint
    async function populateDropdown(url, elementId, valueField, textField) {
        const response = await fetch(url);
        if (response.ok) {
            const data = await response.json();
            const selectElement = $(`#${elementId}`);
            selectElement.empty().append(data.map(item => new Option(item[textField], item[valueField])));
            selectElement.select2({
                placeholder: "برجاء الاختيار",
                allowClear: true,
                width: '100%'
            });
        } else {
            console.error('Failed to load data for:', elementId);
        }
    }

    $(function () {
        $("#moveInventoryPopup").dxPopup({
            title: "نقل المخزون",
            visible: false,
            width: 600,
            height: 500,
        });
        populateDropdown('/Branches/LoadBranches', 'fromBranch', 'BranchId', 'BranchName');
        populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
        populateDropdown('/Products/LoadProducts', 'productId', 'ProductId', 'ProductName');
    });

    function showMoveInventoryPopup() {
        $("#moveInventoryPopup").dxPopup("show");
        populateDropdown('/Branches/LoadBranches', 'fromBranch', 'BranchId', 'BranchName');
        populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
        populateDropdown('/Products/LoadProducts', 'productId', 'ProductId', 'ProductName');
    }


    function productChanged() {
        var productId = $('#productId').val();
        populateDropdown(`/Products/GetAvailableSizes?ProductId=${productId}`, 'sizeId', 'SizeId', 'SizeName');
        populateDropdown(`/Products/GetAvailableColors?ProductId=${productId}`, 'colorId', 'ColorId', 'ColorName');
    }


    async function moveInventory() {
        var data = {
            fromBranchId: $('#fromBranch').val(),
            toBranchId: $('#toBranch').val(),
            productId: $('#productId').val(),
            sizeId: $('#sizeId').val(),
            colorId: $('#colorId').val(),
            quantity: $('#quantity').val()
        };

        const response = await fetch('/InventoryMovement/AddNewinventoryMovement', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            alert("تم نقل الكمية بنجاح.");
            $("#moveInventoryPopup").dxPopup("hide");
        } else {
            alert("حدث خطأ أثناء نقل الكمية.");
        }
    }

    //////////
    var invoiceItems = []; 

    $(document).ready(function () {
        initializeItemsGrid();
    });

    function displayMessage(type, message) {
        console.log('Displaying message:', type, message); // Add this line for debugging
        const messageContainer = document.createElement("div");
        messageContainer.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
        messageContainer.role = "alert";
        messageContainer.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

        const alertPlaceholder = document.getElementById("alertPlaceholder");
        alertPlaceholder.innerHTML = '';
        alertPlaceholder.appendChild(messageContainer);
    }


    function initializeItemsGrid() {
        $("#invoiceItemsGrid").dxDataGrid({
            dataSource: invoiceItems,
            columns: [
                { dataField: "ProductId", caption: "اسم المنتج" },
                { dataField: "SizeId", caption: "المقاس" },
                { dataField: "ColorId", caption: "اللون" },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "BranchId", caption: "الفرع" }
            ],
        });
    }

    // Function to validate item fields
    function validateItem(item) {
        return item.ProductId && item.SizeId && item.ColorId && item.BranchId && !isNaN(item.Quantity) && item.Quantity > 0;
    }

    // Function to clear form fields after adding an item
    function clearFormFields() {
        $('#ProductId').val('').trigger('change');
        $('#SizeId').val('').trigger('change');
        $('#ColorId').val('').trigger('change');
        $('#BranchId').val('').trigger('change');
        $('#Quantity').val('');
        $('#Notes').val('');
    }

    $(function () {
        // Initialize product details popup
        var productDetailsPopup = $("#productDetailsPopup").dxPopup({
            title: "إدخال إلى المخزن",
            visible: false,
            width: 800,
            height: 500,
            onShown: function () {
                initSelectBoxes();
            }
        }).dxPopup("instance");

        // Array to hold invoice items
        var invoiceItems = [];

        // Initialize the grid inside the popup
        $("#invoiceItemsGrid").dxDataGrid({
            dataSource: invoiceItems,
            columns: [
                { dataField: "ProductId", caption: "اسم المنتج" },
                { dataField: "SizeId", caption: "المقاس" },
                { dataField: "ColorId", caption: "اللون" },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "BranchId", caption: "الفرع" },
                { dataField: "Notes", caption: "ملاحظات" }
            ],
            editing: {
                allowDeleting: true,
                texts: {
                    confirmDeleteMessage: 'هل أنت متأكد من أنك تريد حذف هذا العنصر؟'
                }
            },
            showBorders: true,
            rtlEnabled: true
        });

        // Function to open the popup
        window.showProductDetailsPopup = function () {
            productDetailsPopup.show();
        };

        window.addItemToGrid = function () {
            // Collect item details from form fields
            var item = {
                ProductId: $('#ProductId').val(),
                SizeId: $('#SizeId').val(),
                ColorId: $('#ColorId').val(),
                BranchId: $('#BranchId').val(), 
                Quantity: parseInt($('#Quantity').val(), 10),
                Notes: $('#Notes').val()
            };

            var isValid = validateItem(item);

            if (isValid) {
                invoiceItems.push(item);
                $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
                clearFormFields();
            } else {
                alert('برجاء ملاء جميع الحقول');
            }
        };

        // Function to close the popup
        window.closePopup = function () {
            $("#productDetailsPopup").dxPopup("instance").hide(); 
            invoiceItems = []; 
            $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
        };

        // Populate dropdowns
        async function initSelectBoxes() {
            populateDropdown('/Products/LoadProducts', 'ProductId', 'ProductId', 'ProductName');
            populateDropdown('/Sizes/LoadSizes', 'SizeId', 'SizeId', 'SizeName');
            populateDropdown('/Colors/LoadColors', 'ColorId', 'ColorId', 'ColorName');
            populateDropdown('/Branches/LoadBranches', 'BranchId', 'BranchId', 'BranchName');
        }

        // Generic function to populate a dropdown from an endpoint
        async function populateDropdown(url, elementId, valueField, textField) {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                selectElement.empty().append(data.map(item => new Option(item[textField], item[valueField])));
                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        }

        window.saveInvoice = async function () {
            if (invoiceItems.length === 0) {
                displayMessage('error', "يرجى إضافة منتج واحد على الأقل قبل الحفظ.");
                return;
            }

            for (let item of invoiceItems) {
                let formData = new FormData();
                formData.append("values", JSON.stringify(item));

                try {
                    const response = await fetch('/PurchaseItems/AddNewPurchaseItem', {
                        method: 'POST',
                        body: formData,
                    });

                    const result = await response.json();

                    if (!result.success) {
                        displayMessage('error', result.message);
                        return; 
                    }
                } catch (error) {
                    console.error('Could not save the invoice item:', error);
                    displayMessage('error', "حدث خطأ أثناء الحفظ، يرجى المحاولة مرة أخرى.");
                    return; 
                }
            }

            displayMessage('success', "تم الادخال بنجاح لجميع العناصر.");
            invoiceItems = []; 
            $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
        };



    });

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Products');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Products.xlsx');
            });
        });
    }

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        var customButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة تصنيف جديد',
                onClick: function () {
                    window.location.href = '@Url.Action("CategoriesPage", "Categories")';
                }
            },
            location: 'after',
            name: 'customButton'
        };
        toolbarItems.push(customButton);
    }
</script>

<style>
    .select2-container--open {
        z-index: 9999999 !important;
    }
</style>
