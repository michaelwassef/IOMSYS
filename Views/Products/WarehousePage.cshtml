@{
    ViewData["Title"] = "WarehousePage";
    Layout = "_DevExtremeLayout";
}

<div id="alertPlaceholder"></div>
<h1>المخزن</h1>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>

<button type="button" class="btn btn-primary col-md-3" data-toggle="modal" data-target="#dataGridPopup">
   المخزن المعلق <span id="dataCountBadge" class="custom-badge-danger mx-1"></span>
</button>
<button type="button" onclick="printreportofwarehouse()" class="btn btn-primary col-md-3 mx-3">عرض الجرد المجمع اليومي</button>

@*<button class="btn btn-primary mx-1" onclick="showMoveInventoryPopup()"> نقل كميات للفروع</button>
*@

<!-- Popup Modal -->
<div class="modal fade" id="dataGridPopup" tabindex="-1" role="dialog" aria-labelledby="dataGridPopupLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dataGridPopupLabel">طلبات مرسلة الي الفرع المسئول عنه وتنتظر القبول</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Placeholder for DataGrid -->
                <div id="inventoryMovementsGrid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@(Html.DevExtreme().DataGrid<ProductsModel>()
    .ID("gridContainer")
    .DataSource(d => d
        .Mvc()
        .Controller("Products")
        .LoadAction("GetAllProductsInWarehouseByBranch")
        .Key("ProductId")
    )
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .ColumnAutoWidth(true)
    .AllowColumnResizing(true)
    .Editing(e => e.Mode(GridEditMode.Popup))
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.ProductName).Caption("اسم المنتج");
        columns.AddFor(m => m.SizeName).Caption("المقاس");
        columns.AddFor(m => m.ColorName).Caption("اللون");
        columns.AddFor(m => m.CategoryName).Caption("التصنيف");
        columns.AddFor(m => m.ProductTypeName).Caption("نوع المنتج");
        columns.AddFor(m => m.TotalQuantity).Caption("الكمية المتوفرة");
        columns.AddFor(m => m.TotalSellPrice).Caption("اجمالي مبلغ البيع");
        columns.AddFor(m => m.TotalSoldQuantity).Caption("الكمية المباعة");
    })
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
            .Column("اجمالي مبلغ الشراء")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ الشراء : {0}");

            items.Add()
            .Column("اجمالي مبلغ البيع")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ البيع : {0}");

            items.Add()
           .Column("الكمية المباعة")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي الكمية المباعة : {0}");
        })
    )
)
<div id="moveInventoryPopup" style="display:none;">
    <div>
        <form id="moveInventoryForm">
            <div class="form-group">
                <label for="ProductId">المنتج:</label>
                <select id="productId" class="form-control" onchange="productChanged()"></select>
            </div>
            <div class="form-group">
                <label for="SizeId">المقاس:</label>
                <select id="sizeId" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="ColorId">اللون:</label>
                <select id="colorId" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="FromBranchId">من فرع:</label>
                <select id="fromBranch" class="form-control"></select>
                <div id="availableQtyDisplay" class="text-primary mt-2"></div>
            </div>
            <div class="form-group">
                <label for="ToBranchId">إلى فرع:</label>
                <select id="toBranch" class="form-control"></select>
                <div id="availableQtyDisplay2" class="text-primary mt-2"></div>
            </div>
            <div class="form-group">
                <label for="Quantity">الكمية:</label>
                <input type="number" id="quantity" class="form-control" min="1" required>
            </div>
            <div class="form-group mb-3">
                <label for="Notes">ملاحظات</label>
                <input type="text" id="notes" class="form-control" required />
            </div>
            <button class="btn btn-primary mx-1" id="addTransferItemButton">إضافة منتج للنقل</button>
            <div>
                <div id="transferItemsGrid" class="my-3"></div>
            </div>
            <div class="my-3">
                <button type="button" class="btn btn-secondary mx-3" onclick="closePopup2()">إغلاق</button>
                <button type="button" class="btn btn-success" onclick="moveInventory()">تأكيد النقل</button>
            </div>
        </form>
    </div>
</div>

<script>
    async function printreportofwarehouse() {
        try {
            // Assuming the branchId select element has the ID "BranchId"
            const branchId = document.getElementById('BranchId').value;
            if (!branchId) {
                alert('Please select a branch first.');
                return;
            }

            const response = await fetch(`/Products/TotalBranchInventoryReport?BranchId=${branchId}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch PDF content: ${response.statusText}`);
            }
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            const pdfWindow = window.open(url, "_blank");
            if (pdfWindow) {
                pdfWindow.onload = function () {
                    try {
                        pdfWindow.focus(); 
                        pdfWindow.print();
                    } catch (e) {
                        console.error("Error attempting to print:", e);
                    }
                };
            } else {
                throw new Error('Failed to open new window. Please check your popup blocker settings.');
            }
        } catch (error) {
            console.error('Error printing report:', error);
            alert('An error occurred while trying to print the report. Please try again.');
        }
    }
    $(function () {
        $("#inventoryMovementsGrid").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "MovementId",
                load: function () {
                    return $.getJSON("/InventoryMovement/LoadHangingWarehouse").then(function (data) {
                        updateDataCountBadge(data.length);
                        return data;
                    });
                }
            }),
            width: "100%",
            columns: [
                { dataField: "ProductName", caption: "اسم المنتج" },
                { dataField: "SizeName", caption: "المقاس" },
                { dataField: "ColorName", caption: "اللون" },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "FromBranchName", caption: "من فرع" },
                { dataField: "ToBranchName", caption: "الي فرع" },
                { dataField: "IsApproved", caption: "هل موافق عليه؟" },
                { dataField: "Notes", caption: "ملاحظات" },
                { dataField: "MovementDate", caption: "تاريخ النقل", dataType: "date" },
                {
                caption: "الإجراءات",
                    cellTemplate: function (container, options) {
                        $('<button/>').addClass('btn btn-success btn-sm mx-1')
                            .text('قبول')
                            .on('click', function () {
                                approveOrRejectMovement(options.data.MovementId, true);
                            })
                            .appendTo(container);

                        $('<button/>').addClass('btn btn-danger btn-sm')
                            .text('رفض')
                            .on('click', function () {
                                approveOrRejectMovement(options.data.MovementId, false);
                            })
                            .appendTo(container);
                    }
                }
            ],
            allowColumnResizing: true,
            columnAutoWidth: true,
            rtlEnabled: true
        });

        // Use the 'shown.bs.modal' event to trigger column auto-sizing
        $('#dataGridPopup').on('shown.bs.modal', function () {
            // Now get the DataGrid instance and call updateDimensions or repaint
            var dataGrid = $("#inventoryMovementsGrid").dxDataGrid("instance");
            dataGrid.updateDimensions(); // Or dataGrid.repaint();
        });

        function updateDataCountBadge(count) {
            if (count > 0) {
                $("#dataCountBadge").text(count).show();
            } else {
                $("#dataCountBadge").hide();
            }
        }
    });

    function approveOrRejectMovement(movementId, isApproved) {
        var formData = new FormData();
        formData.append('movementId', movementId);
        formData.append('isApproved', isApproved);

        $.ajax({
            url: '/InventoryMovement/ApproveOrRejectMovement',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.success) {
                    DevExpress.ui.notify({
                        message: response.message,
                        position: {
                            my: "center top",
                            at: "center top"
                        }
                    }, "success", 3000);

                    // Refresh the DataGrid
                    $("#inventoryMovementsGrid").dxDataGrid("instance").refresh();
                } else {
                    DevExpress.ui.notify(response.message, "error", 3000);
                }
            },
            error: function () {
                DevExpress.ui.notify("Error processing your request", "error", 3000);
            }
        });
    }
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            // Load branches data
            const branchesResponse = await fetch('/Branches/LoadBranchesByUser');
            if (!branchesResponse.ok) {
                console.error('Failed to load branches data');
                return;
            }
            const branchesData = await branchesResponse.json();

            // Populate branches dropdown
            populateDropdownData(branchesData);

            // Set the default branch to the first option
            const defaultBranchId = branchesData.length > 0 ? branchesData[0]['BranchId'] : null;
            if (defaultBranchId) {
                const loadUrl = `/Products/GetAllProductsInWarehouseByBranch?branchId=${defaultBranchId}`;
                loadSalesInvoices(loadUrl);
            }

            // Event listener for branch selection change
            $('#BranchId').change(function () {
                const branchId = $(this).val();
                const loadUrl = `/Products/GetAllProductsInWarehouseByBranch?branchId=${branchId}`;
                loadSalesInvoices(loadUrl);
            });
        } catch (error) {
            console.error('Error loading data:', error);
        }
    });

    function populateDropdownData(data) {
        const selectElement = document.getElementById('BranchId');
        selectElement.innerHTML = '';
        data.forEach(item => {
            const option = new Option(item['BranchName'], item['BranchId']);
            selectElement.add(option);
        });
    }

    async function loadSalesInvoices(url) {
        try {
            const salesInvoicesResponse = await fetch(url);
            if (!salesInvoicesResponse.ok) {
                console.error('Failed to load sales invoices data');
                return;
            }
            const salesInvoicesData = await salesInvoicesResponse.json();

            $("#gridContainer").dxDataGrid("instance").option("dataSource", {
                load: function () {
                    return salesInvoicesData;
                },
                key: "ProductId"
            });
        } catch (error) {
            console.error('Error loading sales invoices:', error);
        }
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Products');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Products.xlsx');
            });
        });
    }

    //////////////////////////////////////////////////////////
    //function showMoveInventoryPopup() {
    //    $("#moveInventoryPopup").dxPopup("show");
    //    initializeItemsGrid2();
    //    populateDropdown('/Branches/LoadBranchesByUser', 'fromBranch', 'BranchId', 'BranchName');
    //    populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
    //    populateDropdown('/Products/GetAllProductsInWarehouse', 'productId', 'ProductId', 'ProductName');

    //    setTimeout(() => {
    //        var productId = $('#productId').val();
    //        productChanged()
    //        var sizeId = $('#sizeId').val();
    //        var colorId = $('#colorId').val();
    //        var fromBranchId = $('#fromBranch').val();
    //        var toBranchId = $('#toBranch').val();
    //        if (productId && sizeId && colorId && fromBranchId) {
    //            fetchAvailableQuantity(productId, sizeId, colorId, fromBranchId, '#availableQtyDisplay');
    //        }
    //        if (productId && sizeId && colorId && toBranchId) {
    //            fetchAvailableQuantity(productId, sizeId, colorId, toBranchId, '#availableQtyDisplay2');
    //        }
    //    }, 100);
    //}

    //async function populateDropdown(url, elementId, valueField, textField, prevSelectedValue) {
    //    try {
    //        const response = await fetch(url);
    //        if (response.ok) {
    //            const data = await response.json();
    //            const selectElement = $(`#${elementId}`);
    //            selectElement.empty();
    //            data.forEach(item => {
    //                const option = new Option(item[textField], item[valueField]);
    //                selectElement.append(option);
    //            });

    //            // If previous value still exists, reselect it
    //            if (prevSelectedValue && selectElement.find(`option[value="${prevSelectedValue}"]`).length > 0) {
    //                selectElement.val(prevSelectedValue).trigger('change');
    //            } else {
    //                selectElement.val(null).trigger('change'); // Reset or set to a placeholder if no previous value
    //            }

    //            // Reinitialize select2 if used
    //            selectElement.select2({
    //                placeholder: "برجاء الاختيار",
    //                allowClear: true,
    //                width: '100%'
    //            });
    //        } else {
    //            console.error('Failed to load data for:', elementId);
    //        }
    //    } catch (error) {
    //        console.error('Error populating dropdown:', error);
    //    }
    //}

    //async function fetchAvailableQuantity(productId, sizeId, colorId, branchId, displayElement) {
    //    try {
    //        const response = await fetch(`/Products/GetAvailable?productId=${productId}&sizeId=${sizeId}&colorId=${colorId}&branchId=${branchId}`);
    //        const data = await response.json();
    //        $(displayElement).text(`الكمية المتاحة: ${data}`);
    //    } catch (error) {
    //        console.error('Error fetching available quantity:', error);
    //        $(displayElement).text(`الكمية المتاحة: 0`);
    //    }
    //}

    //window.closePopup2 = function () {
    //    $("#moveInventoryPopup").dxPopup("hide");
    //};

    //$(document).ready(function () {
    //    // Shared event handler for product, size, color changes
    //    $('#productId, #sizeId, #colorId').change(function () {
    //        // Fetch for both branches if they are selected
    //        var productId = $('#productId').val();
    //        var sizeId = $('#sizeId').val();
    //        var colorId = $('#colorId').val();
    //        var fromBranchId = $('#fromBranch').val();
    //        var toBranchId = $('#toBranch').val();

    //        // Fetch available quantity for the fromBranch if all necessary selections are made
    //        if (productId && sizeId && colorId && fromBranchId) {
    //            fetchAvailableQuantity(productId, sizeId, colorId, fromBranchId, '#availableQtyDisplay');
    //        } else {
    //            $('#availableQtyDisplay').text(`الكمية المتاحة: 0`);
    //        }

    //        // Fetch available quantity for the toBranch if all necessary selections are made
    //        if (productId && sizeId && colorId && toBranchId) {
    //            fetchAvailableQuantity(productId, sizeId, colorId, toBranchId, '#availableQtyDisplay2');
    //        } else {
    //            $('#availableQtyDisplay2').text(`الكمية المتاحة: 0`);
    //        }
    //    });

    //    // Change event for fromBranch and toBranch to update their available quantity display
    //    $('#fromBranch, #toBranch').change(function () {
    //        // Trigger the change event for the product to re-fetch for both branches
    //        $('#productId').change();
    //    });

    //});

    //document.addEventListener('DOMContentLoaded', (event) => {
    //    document.getElementById('addTransferItemButton').addEventListener('click', addItemToTransferList);
    //});

    //function productChanged() {
    //    var productId = $('#productId').val();
    //    var prevSizeId = $('#sizeId').val();
    //    var prevColorId = $('#colorId').val();

    //    populateDropdown(`/Products/GetAvailableSizes?ProductId=${productId}`, 'sizeId', 'SizeId', 'SizeName', prevSizeId);
    //    populateDropdown(`/Products/GetAvailableColors?ProductId=${productId}`, 'colorId', 'ColorId', 'ColorName', prevColorId);
    //}

    //var transferItems = [];

    //async function addItemToTransferList(event) {
    //    event.preventDefault();

    //    var item = {
    //        ProductId: $('#productId').val(),
    //        SizeId: $('#sizeId').val(),
    //        ColorId: $('#colorId').val(),
    //        FromBranchId: $('#fromBranch').val(),
    //        ToBranchId: $('#toBranch').val(),
    //        Quantity: parseInt($('#quantity').val(), 10),
    //        Notes: $('#notes').val()
    //    };

    //    // Check if the destination is not the same as the source
    //    if (item.FromBranchId === item.ToBranchId) {
    //        alert('The destination branch must be different from the source branch.');
    //        return;
    //    }

    //    // Perform validation
    //    if (!validateTransferItem(item)) {
    //        alert('Please fill in all fields and ensure quantity is a valid number.');
    //        return;
    //    }

    //    // Check available quantity in the source branch
    //    try {
    //        const response = await fetch(`/Products/GetAvailable?productId=${item.ProductId}&sizeId=${item.SizeId}&colorId=${item.ColorId}&branchId=${item.FromBranchId}`);
    //        const availableQtyFromBranch = await response.json();

    //        if (availableQtyFromBranch < item.Quantity) {
    //            alert('The available quantity in the source branch is not sufficient for the transfer.');
    //            return;
    //        }

    //        // Add item to transferItems if all checks pass
    //        transferItems.push(item);
    //        displayTransferItems();
    //        clearTransferForm();
    //    } catch (error) {
    //        alert('An error occurred while checking available quantity.');
    //    }
    //};

    //function validateTransferItem(item) {
    //    return item.ProductId && item.SizeId && item.ColorId && item.FromBranchId && item.ToBranchId && !isNaN(item.Quantity) && item.Quantity > 0 && item.FromBranchId !== item.ToBranchId;
    //}

    //function displayTransferItems() {
    //    $("#transferItemsGrid").dxDataGrid("instance").option('dataSource', transferItems);
    //}

    //function clearTransferForm() {
    //    $('#productId').val('').trigger('change');
    //    $('#sizeId').val('').trigger('change');
    //    $('#colorId').val('').trigger('change');
    //    $('#fromBranch').val('').trigger('change');
    //    $('#toBranch').val('').trigger('change');
    //    $('#quantity').val('');
    //    $('#notes').val('');
    //}

    //async function moveInventory() {
    //    if (transferItems.length === 0) {
    //        alert('Please add at least one item to transfer.');
    //        return;
    //    }

    //    const payload = {
    //        Items: transferItems.map(item => ({
    //            ProductId: item.ProductId,
    //            SizeId: item.SizeId,
    //            ColorId: item.ColorId,
    //            FromBranchId: item.FromBranchId,
    //            ToBranchId: item.ToBranchId,
    //            Quantity: item.Quantity,
    //            Notes: item.Notes,
    //        }))
    //    };

    //    try {
    //        const response = await fetch('/InventoryMovement/AddNewInventoryMovement', {
    //            method: 'POST',
    //            headers: {
    //                'Content-Type': 'application/json'
    //            },
    //            body: JSON.stringify(payload)
    //        });

    //        const responseData = await response.json();

    //        if (!responseData.success) {
    //            alert(responseData.message);
    //            return;
    //        }

    //        alert(responseData.message);
    //        transferItems = [];
    //        displayTransferItems();
    //    } catch (error) {
    //        alert(responseData.message);
    //    }
    //}

    //$(function () {
    //    $("#moveInventoryPopup").dxPopup({
    //        title: "نقل المخزون",
    //        visible: false,
    //        width: 600,
    //        height: 500,
    //    });
    //    populateDropdown('/Branches/LoadBranchesByUser', 'fromBranch', 'BranchId', 'BranchName');
    //    populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
    //    populateDropdown('/Products/LoadProducts', 'productId', 'ProductId', 'ProductName');
    //});
</script>
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .custom-badge-danger {
        background-color: #dc3545; /* Bootstrap's danger color */
        color: white;
        border-radius: 100%; /* Makes the badge circular */
        padding: 0.25em 0.6em; /* Adjusts the padding to ensure the circle shape */
        font-size: 0.75em; /* Adjusts the font size */
    }

    .select2-container--open {
        z-index: 9999999 !important;
    }
</style>
