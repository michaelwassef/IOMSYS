@{
    ViewData["Title"] = "WarehousePage";
    Layout = "_DevExtremeLayout";
}
<div class="page-title">
    <h1>المخزن</h1>
</div>

<div id="alertPlaceholder"></div>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId2">اسم الفرع</label>
        <select id="BranchId2" class="form-control"></select>
    </div>
</div>

<div class="row justify-content-center">
    <button class="btn col-md-2 btn-primary btn-block my-1 mx-1" onclick="showProductDetailsPopup()"> اضافة كميات للفروع </button>
    <button class="btn col-md-2 btn-primary btn-block my-1 mx-1" onclick="showMoveInventoryPopup()"> نقل كميات للفروع</button>
    <button class="btn col-md-2 btn-primary btn-block my-1 mx-1" onclick="showfactoryPopup()"> تصنيع </button>
    <button type="button" class="btn col-md-2 btn-primary btn-block my-1 mx-1" data-toggle="modal" data-target="#dataGridPopup">
        المخزن المعلق <span id="dataCountBadge" class="custom-badge-danger mx-1"></span>
    </button>
    <button type="button" onclick="printreportofwarehouse()" class="btn col-md-2 btn-primary btn-block my-1 mx-1">عرض الجرد المجمع اليومي</button>
</div>

<div class="modal fade" id="dataGridPopup" tabindex="-1" role="dialog" aria-labelledby="dataGridPopupLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dataGridPopupLabel">طلبات مرسلة الي الفرع المسئول عنه وتنتظر القبول</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="inventoryMovementsGrid"></div>
            </div>
           <div class="modal-footer">
                 <div>*يرجي تحديد المقبولين بمفردهم ثم الحفظ والمرفوضين بمفردهم ثم الحفظ*</div>
               <button type="button" id="acceptAll" class="btn btn-success">قبول كل الطلبات</button>
                <button type="button" id="rejectAll" class="btn btn-danger">رفض كل الطلبات</button>
                <button type="button" id="saveChanges" class="btn btn-primary">حفظ</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">اغلاق</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="productDetailsPopup" tabindex="-1" role="dialog" aria-labelledby="productDetailsPopupLabel" aria-hidden="true">
    <div class="row">
        <div class="form-group mb-3">
            <label for="ProductId">اسم المنتج</label>
            <select id="ProductId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="SizeId">المقاس</label>
            <select id="SizeId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="ColorId">اللون</label>
            <select id="ColorId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="BranchId">اسم الفرع</label>
            <select id="BranchId" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="Quantity">الكمية</label>
            <input type="text" id="Quantity" class="form-control" required pattern="\d+(\.\d+)?" />
        </div>
        <div class="form-group mb-3">
            <label for="Notes">ملاحظات</label>
            <input type="text" id="Notes" class="form-control" required />
        </div>
        <div class="d-flex justify-content-center mt-3 row">
            <button type="button" class="btn btn-primary mx-2 col-md-6" onclick="addItemToGrid()">إضافة</button>
        </div>
        <div>
            <div id="invoiceItemsGrid" class="my-3"></div>
        </div>
    </div>

    <div class="mb-3" id="alertPlaceholder"></div>

    <div class="d-flex justify-content-center mt-3 row">
        <button type="button" class="btn btn-success mx-2 col-md-4" onclick="saveInvoice()">حــفــظ</button>
        <button type="button" class="btn btn-secondary mx-2 col-md-4" onclick="closePopup()">إغلاق</button>
    </div>
</div>

<div class="modal fade" id="moveInventoryPopup" tabindex="-1" role="dialog" aria-labelledby="moveInventoryPopupLabel" aria-hidden="true">
    <div>
        <form id="moveInventoryForm">
            <div class="form-group">
                <label for="ProductId2">المنتج:</label>
                <select id="productId2" class="form-control" onchange="productChanged()"></select>
            </div>
            <div class="form-group">
                <label for="SizeId2">المقاس:</label>
                <select id="sizeId2" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="ColorId2">اللون:</label>
                <select id="colorId2" class="form-control"></select>
            </div>
            <div class="form-group">
                <label for="FromBranchId">من فرع:</label>
                <select id="fromBranch" class="form-control"></select>
                <div id="availableQtyDisplay" class="text-primary mt-2"></div>
            </div>
            <div class="form-group">
                <label for="ToBranchId">إلى فرع:</label>
                <select id="toBranch" class="form-control"></select>
                <div id="availableQtyDisplay2" class="text-primary mt-2"></div>
            </div>
            <div class="form-group">
                <label for="Quantity">الكمية:</label>
                <input type="text" id="quantity" class="form-control" required pattern="\d+(\.\d+)?"/>
            </div>
            <div class="form-group mb-3">
                <label for="Notes">ملاحظات</label>
                <input type="text" id="notes" class="form-control" required />
            </div>
            <div class="d-flex justify-content-center mt-3 row">
                <button class="btn btn-primary mx-2 col-md-6" id="addTransferItemButton">إضافة منتج للنقل</button>
            </div>
            <div>
                <div id="transferItemsGrid" class="my-3"></div>
            </div>

            <div class="d-flex justify-content-center mt-3 row">
                <div class="form-group form-check mx-2 col-md-2 mt-2">
                    <input type="checkbox" class="form-check-input" id="makeInvoice">
                    <label class="form-check-label" for="makeInvoice" style="user-select: none; cursor: pointer;">إنشاء فاتورة</label>
                </div>
                <button type="button" class="btn btn-success mx-2 col-md-3" onclick="moveInventory()">تأكيد النقل</button>
                <button type="button" class="btn btn-secondary mx-2 col-md-3" onclick="closePopup2()">إغلاق</button>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="factoryPopup" tabindex="-1" role="dialog" aria-labelledby="productDetailsPopupLabel" aria-hidden="true">
    <div class="row">
        <div class="form-group mb-3">
            <label for="ProductId3">اسم المنتج</label>
            <select id="ProductId3" class="form-control"  onchange="productChanged3()" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="SizeId3">المقاس</label>
            <select id="SizeId3" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="ColorId3">اللون</label>
            <select id="ColorId3" class="form-control" required></select>
        </div>
        <div class="form-group mb-3">
            <label for="BranchId3">اسم الفرع</label>
            <select id="BranchId3" class="form-control" required></select>
            <div id="availableQtyDisplay3" class="text-primary mt-2"></div>
        </div>
        <div class="form-group mb-3">
            <label for="Quantity3">الكمية</label>
            <input type="text" id="Quantity3" class="form-control" required pattern="\d+(\.\d+)?"/>
        </div>
        <div class="form-group mb-3">
            <label for="Notes3">ملاحظات</label>
            <input type="text" id="Notes3" class="form-control" required />
        </div>
        <div class="d-flex justify-content-center mt-3 row">
            <button type="button" class="btn btn-primary mx-2 col-md-4" onclick="addItemToGrid3()">إضافة</button>
        </div>
        <div>
            <div id="invoiceItemsGrid3" class="my-3"></div>
        </div>
    </div>

    <div class="mb-3" id="alertPlaceholder"></div>

    <div class="d-flex justify-content-center mt-3 row">
        <button type="button" class="btn btn-success mx-2 col-md-4" onclick="saveInvoice3()">حــفــظ</button>
        <button type="button" class="btn btn-secondary mx-2 col-md-4" onclick="closePopup3()">إغلاق</button>
    </div>
</div>

@(Html.DevExtreme().DataGrid<ProductsModel>()
    .ID("gridContainer")
    .DataSource(d => d
        .Mvc()
        .Controller("Products")
        .LoadAction("GetAllProductsInWarehouseByBranch")
        .Key("ProductId")
    )
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .ColumnAutoWidth(true)
    .AllowColumnResizing(true)
    .Editing(e => e.Mode(GridEditMode.Popup))
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.ProductName).Caption("اسم المنتج");
        columns.AddFor(m => m.SizeName).Caption("المقاس");
        columns.AddFor(m => m.ColorName).Caption("اللون");
        columns.AddFor(m => m.CategoryName).Caption("التصنيف");
        columns.AddFor(m => m.ProductTypeName).Caption("نوع المنتج");
        columns.AddFor(m => m.TotalQuantity).Caption("الكمية المتوفرة");
        columns.AddFor(m => m.TotalSellPrice).Caption("اجمالي مبلغ البيع");
        columns.AddFor(m => m.TotalSoldQuantity).Caption("الكمية المباعة");
    })
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
            .Column("اجمالي مبلغ الشراء")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ الشراء : {0}");

            items.Add()
            .Column("اجمالي مبلغ البيع")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ البيع : {0}");

            items.Add()
           .Column("الكمية المباعة")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي الكمية المباعة : {0}");
        })
    )
)

<script>
    let movementSelections = {
        approved: [],
        rejected: []
    };

    $('#acceptAll').click(function () {
        (async function () {
            $('#loadingIndicator').show();
            var dataGrid = $("#inventoryMovementsGrid").dxDataGrid("instance");
            // Retrieve the data items
            var items = dataGrid.getDataSource().items();
            movementSelections.approved = [];
            movementSelections.rejected = [];

            items.forEach(function (item) {
                movementSelections.approved.push(item.MovementId);
            });
            if (movementSelections.approved.length > 0) {
                await approveOrRejectMovements(movementSelections.approved, true);
                movementSelections.approved = [];
            }

            $("#inventoryMovementsGrid").dxDataGrid("instance").refresh();
            $('#loadingIndicator').hide();
        })();
    });

    $('#rejectAll').click(function () {
        (async function () {
            $('#loadingIndicator').show();
            var dataGrid = $("#inventoryMovementsGrid").dxDataGrid("instance");
            var items = dataGrid.getDataSource().items();
            movementSelections.approved = [];
            movementSelections.rejected = [];
            items.forEach(function (item) {
                movementSelections.rejected.push(item.MovementId);
            });
            if (movementSelections.rejected.length > 0) {
                await approveOrRejectMovements(movementSelections.rejected, false);
                movementSelections.rejected = [];
            }

            $("#inventoryMovementsGrid").dxDataGrid("instance").refresh();
            $('#loadingIndicator').hide();
        })();
    });


    async function printreportofwarehouse() {
        $('#loadingIndicator').show();
        try {
            const branchId = document.getElementById('BranchId2').value;
            if (!branchId) {
                DevExpress.ui.notify("برجاء اختيار فرع اولا", "error", 3000);
                $('#loadingIndicator').hide();
                return;
            }

            const response = await fetch(`/Products/TotalBranchInventoryReport?BranchId=${branchId}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch PDF content: ${response.statusText}`);
                $('#loadingIndicator').hide();
            }
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            const pdfWindow = window.open(url, "_blank");
            if (pdfWindow) {
                pdfWindow.onload = function () {
                    try {
                        pdfWindow.focus(); 
                        pdfWindow.print();
                        $('#loadingIndicator').hide();
                    } catch (e) {
                        console.error("Error attempting to print:", e);
                        $('#loadingIndicator').hide();
                    }
                };
            } else {
                throw new Error('Failed to open new window. Please check your popup blocker settings.');
                $('#loadingIndicator').hide();
            }
        } catch (error) {
            DevExpress.ui.notify(error, "error", 3000);
            $('#loadingIndicator').hide();
        }
    }

    $(function () {
        $("#inventoryMovementsGrid").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "MovementId",
                load: function () {
                    return $.getJSON("/InventoryMovement/LoadHangingWarehouse").then(function (data) {
                        updateDataCountBadge(data.length);
                        return data;
                    });
                }
            }),
            width: "100%",
            columns: [
                { dataField: "ProductName", caption: "اسم المنتج" },
                { dataField: "SizeName", caption: "المقاس" },
                { dataField: "ColorName", caption: "اللون" },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "FromBranchName", caption: "من فرع" },
                { dataField: "ToBranchName", caption: "الي فرع" },
                { dataField: "Notes", caption: "ملاحظات" },
                { dataField: "MovementDate", caption: "تاريخ النقل", dataType: "date" },
                {
                    caption: "الإجراءات",
                    cellTemplate: function (container, options) {
                        const approvalButton = $('<button/>')
                            .addClass('btn btn-sm mx-1')
                            .text(options.data.IsApproved ? 'مقبول' : 'قبول')
                            .addClass(options.data.IsApproved ? 'btn-secondary' : 'btn-success')
                            .on('click', function () {
                                options.data.IsApproved = !options.data.IsApproved;
                                options.data.IsRejected = false;
                                updateButtonAppearance(approvalButton, rejectionButton, options.data);
                                updateSelections(options.data.MovementId, true, options.data.IsApproved);
                            });

                        const rejectionButton = $('<button/>')
                            .addClass('btn btn-sm')
                            .text(options.data.IsRejected ? 'مرفوض' : 'رفض')
                            .addClass(options.data.IsRejected ? 'btn-secondary' : 'btn-danger')
                            .on('click', function () {
                                options.data.IsRejected = !options.data.IsRejected;
                                options.data.IsApproved = false;
                                updateButtonAppearance(approvalButton, rejectionButton, options.data);
                                updateSelections(options.data.MovementId, false, options.data.IsRejected);
                            });
                        container.append(approvalButton, rejectionButton);
                    }
                }
            ],
            allowColumnResizing: true,
            columnAutoWidth: true,
            rtlEnabled: true
        });

        $('#dataGridPopup').on('shown.bs.modal', function () {
            var dataGrid = $("#inventoryMovementsGrid").dxDataGrid("instance");
            dataGrid.updateDimensions();
        });

        function updateDataCountBadge(count) {
            if (count > 0) {
                $("#dataCountBadge").text(count).show();
            } else {
                $("#dataCountBadge").hide();
            }
        }
    });

    function updateButtonAppearance(approvalButton, rejectionButton, data) {
        if (data.IsApproved) {
            approvalButton.removeClass('btn-success').addClass('btn-secondary').text('مقبول');
            rejectionButton.hide();
        } else if (data.IsRejected) {
            rejectionButton.removeClass('btn-danger').addClass('btn-secondary').text('مرفوض');
            approvalButton.hide();
        } else {
            approvalButton.addClass('btn-success').removeClass('btn-secondary').text('قبول');
            rejectionButton.addClass('btn-danger').removeClass('btn-secondary').text('رفض');
            approvalButton.show();
            rejectionButton.show();
        }
    }


    function updateSelections(movementId, isApproval, isSelected) {
        const index = movementSelections.approved.indexOf(movementId);
        const indexRejected = movementSelections.rejected.indexOf(movementId);
        if (isApproval) {
            if (isSelected && index === -1) {
                movementSelections.approved.push(movementId);
            } else if (!isSelected && index !== -1) {
                movementSelections.approved.splice(index, 1);
            }
            if (indexRejected !== -1) {
                movementSelections.rejected.splice(indexRejected, 1);
            }
        } else {
            if (isSelected && indexRejected === -1) {
                movementSelections.rejected.push(movementId);
            } else if (!isSelected && indexRejected !== -1) {
                movementSelections.rejected.splice(indexRejected, 1);
            }
            if (index !== -1) {
                movementSelections.approved.splice(index, 1);
            }
        }
    }

    function approveOrRejectMovement(movementId, isApproved) {
        $('#loadingIndicator').show();
        var formData = new FormData();
        formData.append('movementId', movementId);
        formData.append('isApproved', isApproved);

        $.ajax({
            url: '/InventoryMovement/ApproveOrRejectMovement',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.success) {
                    DevExpress.ui.notify({
                        message: response.message,
                        position: {
                            my: "center top",
                            at: "center top"
                        }
                    }, "success", 3000);
                    $('#loadingIndicator').hide();
                    $("#inventoryMovementsGrid").dxDataGrid("instance").refresh();
                } else {
                    DevExpress.ui.notify(response.message, "error", 3000);
                    $('#loadingIndicator').hide();
                }
            },
            error: function () {
                DevExpress.ui.notify("Error processing your request", "error", 3000);
                $('#loadingIndicator').hide();
            }
        });
    }

    document.addEventListener('DOMContentLoaded', async function () {
        try {
            // Load branches data
            const branchesResponse = await fetch('/Branches/LoadBranchesByUser');
            if (!branchesResponse.ok) {
                console.error('Failed to load branches data');
                return;
            }
            const branchesData = await branchesResponse.json();

            // Populate branches dropdown
            populateDropdownData(branchesData);

            // Set the default branch to the first option
            const defaultBranchId = branchesData.length > 0 ? branchesData[0]['BranchId'] : null;
            if (defaultBranchId) {
                const loadUrl = `/Products/GetAllProductsInWarehouseByBranch?branchId=${defaultBranchId}`;
                loadSalesInvoices(loadUrl);
            }

            // Event listener for branch selection change
            $('#BranchId2').change(function () {
                const branchId = $(this).val();
                const loadUrl = `/Products/GetAllProductsInWarehouseByBranch?branchId=${branchId}`;
                loadSalesInvoices(loadUrl);
            });
        } catch (error) {
            console.error('Error loading data:', error);
        }
    });

    function populateDropdownData(data) {
        const selectElement = document.getElementById('BranchId2');
        selectElement.innerHTML = '';
        data.forEach(item => {
            const option = new Option(item['BranchName'], item['BranchId']);
            selectElement.add(option);
        });
    }

    $(function () {
        $('#saveChanges').click(async function () {
            $('#loadingIndicator').show();

            if (movementSelections.approved.length > 0) {
                await approveOrRejectMovements(movementSelections.approved, true);
                movementSelections.approved = []; 
            }
            if (movementSelections.rejected.length > 0) {
                await approveOrRejectMovements(movementSelections.rejected, false);
                movementSelections.rejected = [];
            }

            $("#inventoryMovementsGrid").dxDataGrid("instance").refresh();

            $('#loadingIndicator').hide();
        });
    });

    async function approveOrRejectMovements(movementIds, isApproved) {
        try {
            const response = await fetch('/InventoryMovement/ApproveOrRejectMovements', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    MovementIds: movementIds,
                    IsApproved: isApproved
                }),
            });

            const responseData = await response.json();
            if (responseData.success) {
                DevExpress.ui.notify(responseData.message, "success", 3000);
            } else {
                DevExpress.ui.notify(responseData.message, "error", 3000);
            }
        } catch (error) {
            DevExpress.ui.notify("An unexpected error occurred.", "error", 3000);
            console.error("An unexpected error occurred:", error);
        }
    }

    async function loadSalesInvoices(url) {
        try {
            const salesInvoicesResponse = await fetch(url);
            if (!salesInvoicesResponse.ok) {
                console.error('Failed to load sales invoices data');
                return;
            }
            const salesInvoicesData = await salesInvoicesResponse.json();

            $("#gridContainer").dxDataGrid("instance").option("dataSource", {
                load: function () {
                    return salesInvoicesData;
                },
                key: "ProductId"
            });
        } catch (error) {
            console.error('Error loading sales invoices:', error);
        }
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Products');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Products.xlsx');
            });
        });
    }
</script>

<script>
    window.closePopup2 = function () {
        $("#moveInventoryPopup").dxPopup("instance").hide();
        transferItems = [];
        clearTransferForm();
        $("#transferItemsGrid").dxDataGrid("instance").option('dataSource', transferItems);
     };

    $(document).ready(function () {
        $('#productId2, #sizeId2, #colorId2').change(function () {
            var productId = $('#productId2').val();
            var sizeId = $('#sizeId2').val();
            var colorId = $('#colorId2').val();
            var fromBranchId = $('#fromBranch').val();
            var toBranchId = $('#toBranch').val();

            if (productId && sizeId && colorId && fromBranchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, fromBranchId, '#availableQtyDisplay');
            }
            if (productId && sizeId && colorId && toBranchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, toBranchId, '#availableQtyDisplay2');
            }
        });

        $('#fromBranch, #toBranch').change(function () {
            $('#productId2').change();
        });
    });

    document.addEventListener('DOMContentLoaded', (event) => {
        document.getElementById('addTransferItemButton').addEventListener('click', addItemToTransferList);
    });

    async function fetchAvailableQuantity(productId, sizeId, colorId, branchId, displayElement) {
        try {
            const response = await fetch(`/Products/GetAvailable?productId=${productId}&sizeId=${sizeId}&colorId=${colorId}&branchId=${branchId}`);
            const data = await response.json();
            $(displayElement).text(`الكمية المتاحة: ${data}`);
        } catch (error) {
            console.error('Error fetching available quantity:', error);
            $(displayElement).text(`الكمية المتاحة: 0`);
        }
    }

    async function populateDropdown(url, elementId, valueField, textField, prevSelectedValue) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                selectElement.empty();
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.append(option);
                });

                if (prevSelectedValue && selectElement.find(`option[value="${prevSelectedValue}"]`).length > 0) {
                    selectElement.val(prevSelectedValue).trigger('change');
                } else {
                    selectElement.val(null).trigger('change');
                }

                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error populating dropdown:', error);
        }
    }
    
    function showMoveInventoryPopup() {
        $("#moveInventoryPopup").dxPopup("show");
        initializeItemsGrid2();
        populateDropdown('/Branches/LoadBranchesByUser', 'fromBranch', 'BranchId', 'BranchName');
        populateDropdown('/Branches/LoadBranches', 'toBranch', 'BranchId', 'BranchName');
        populateDropdown('/Products/GetAllProductsInWarehouse', 'productId2', 'ProductId', 'ProductName');

        setTimeout(() => {
            var productId = $('#productId2').val();
            productChanged()
            var sizeId = $('#sizeId2').val();
            var colorId = $('#colorId2').val();
            var fromBranchId = $('#fromBranch').val();
            var toBranchId = $('#toBranch').val();
            if (productId && sizeId && colorId && fromBranchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, fromBranchId, '#availableQtyDisplay');
            }
            if (productId && sizeId && colorId && toBranchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, toBranchId, '#availableQtyDisplay2');
            }
        }, 100);
    }

    function productChanged() {
        var productId = $('#productId2').val();
        var prevSizeId = $('#sizeId2').val();
        var prevColorId = $('#colorId2').val();

        populateDropdown(`/Products/GetAvailableSizes?ProductId=${productId}`, 'sizeId2', 'SizeId', 'SizeName', prevSizeId);
        populateDropdown(`/Products/GetAvailableColors?ProductId=${productId}`, 'colorId2', 'ColorId', 'ColorName', prevColorId);
    }

    var transferItems = [];

    async function addItemToTransferList(event) {
        event.preventDefault();

        var item = {
            ProductId: $('#productId2').val(),
            SizeId: $('#sizeId2').val(),
            ColorId: $('#colorId2').val(),
            FromBranchId: $('#fromBranch').val(),
            ToBranchId: $('#toBranch').val(),
            Quantity: parseFloat($('#quantity').val()),
        };

        // Check if the destination is not the same as the source
        if (item.FromBranchId === item.ToBranchId) {
            DevExpress.ui.notify("لا يمكن النقل الي نفس الفرع", "error", 3000);
            return;
        }

        // Perform validation
        if (!validateTransferItem(item)) {
            DevExpress.ui.notify("تاكد من ملاء جميع الخانات", "error", 3000);
            return;
        }

        // Check available quantity in the source branch
        try {
            const response = await fetch(`/Products/GetAvailable?productId=${item.ProductId}&sizeId=${item.SizeId}&colorId=${item.ColorId}&branchId=${item.FromBranchId}`);
            const availableQtyFromBranch = await response.json();

            if (availableQtyFromBranch < item.Quantity) {
                DevExpress.ui.notify("لا توجد كمية كافية للنقل", "error", 3000);
                return;
            }

            // Add item to transferItems if all checks pass
            transferItems.push(item);
            displayTransferItems();
            clearTransferForm();
        } catch (error) {
            DevExpress.ui.notify(error, "error", 3000);
        }
    };

    function validateTransferItem(item) {
        return item.ProductId && item.SizeId && item.ColorId && item.FromBranchId && item.ToBranchId && !isNaN(item.Quantity) && item.Quantity > 0 && item.FromBranchId !== item.ToBranchId;
    }

    function displayTransferItems() {
        $("#transferItemsGrid").dxDataGrid("instance").option('dataSource', transferItems);
    }

    function clearTransferForm() {
        $('#productId').val('').trigger('change');
        $('#sizeId').val('').trigger('change');
        $('#colorId').val('').trigger('change');
        $('#fromBranch').val('').trigger('change');
        $('#toBranch').val('').trigger('change');
        $('#quantity').val('');
        $('#notes').val('');
    }

    async function moveInventory() {
        $('#loadingIndicator').show();
        if (transferItems.length === 0) {
             DevExpress.ui.notify("اضف صنف واحد علي الاقل للنقل", "error", 3000);
            $('#loadingIndicator').hide();
            return;
        }

        const payload = {
            Items: transferItems.map(item => ({
                ProductId: item.ProductId,
                SizeId: item.SizeId,
                ColorId: item.ColorId,
                FromBranchId: item.FromBranchId,
                ToBranchId: item.ToBranchId,
                Quantity: item.Quantity,
                Notes: item.Notes,
            })),
            makeInvoice: $('#makeInvoice').is(':checked')
        };

        try {
            const response = await fetch('/InventoryMovement/AddNewInventoryMovement', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const responseData = await response.json();

            if (!responseData.success) {
                DevExpress.ui.notify(responseData.message, "error", 3000);
                $('#loadingIndicator').hide();
                return;
            }

            DevExpress.ui.notify(responseData.message, "success", 3000);
            transferItems = [];
            displayTransferItems() ;
            $("#gridContainer").dxDataGrid("instance").refresh();
    } catch (error) {
            DevExpress.ui.notify(responseData.message, "error", 3000);
        }
        finally {
            $('#loadingIndicator').hide(); 
        }
    }

    var invoiceItems = [];

    $(document).ready(function () {
        initializeItemsGrid();
        $('#ProductId, #SizeId2, #ColorId2, #fromBranch').change(function () {
            var productId = $('#ProductId2').val();
            var sizeId = $('#SizeId2').val();
            var colorId = $('#ColorId2').val();
            var branchId = $('#fromBranch').val();

            if (productId && sizeId && colorId && branchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, branchId);
            } else {
                $('#availableQtyDisplay').text('');
            }
        });
    });

    $(function () {
        var moveInventoryPopup = $("#moveInventoryPopup").dxPopup({
            title: "نقل كميات للفروع",
            visible: false,
            rtlEnabled: true,
            width: calculatePopupWidth(),
            height: calculatePopupHeight(),
            toolbarItems: [{
                widget: 'dxButton',
                toolbar: 'top',
                location: 'after',
                options: {
                    icon: 'close',
                    onClick: function () {
                        moveInventoryPopup.hide();
                    }
                }
            }]
        }).dxPopup("instance");
       
        function calculatePopupWidth() {
            var windowWidth = $(window).width();

            if (windowWidth < 768) {
                return "90%";
            } else {
                return 920;
            }
        }

        function calculatePopupHeight() {
            var windowHeight = $(window).height();
            if (windowHeight < 768) {
                return "90%";
            } else {
                return 600;
            }
        }

        $(window).resize(function () {
            moveInventoryPopup.option({
                width: calculatePopupWidth(),
                height: calculatePopupHeight()
            });
        });
    });

    function displayMessage(type, message) {
        const messageContainer = document.createElement("div");
        messageContainer.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
        messageContainer.role = "alert";
        messageContainer.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

        const alertPlaceholder = document.getElementById("alertPlaceholder");
        alertPlaceholder.innerHTML = '';
        alertPlaceholder.appendChild(messageContainer);
    }

    function initializeItemsGrid() {
        $("#invoiceItemsGrid").dxDataGrid({
            dataSource: invoiceItems,
            columns: [
                { dataField: "ProductId", caption: "المنتج",
                  lookup: { dataSource: { load: function () { return $.ajax({url: "/Products/LoadProducts",dataType: "json"});}},valueExpr: "ProductId",displayExpr: "ProductName"}                
                },
                { dataField: "SizeId", caption: "المقاس",
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Sizes/LoadSizes", dataType: "json" }); }}, valueExpr: "SizeId", displayExpr: "SizeName" }
                },
                { dataField: "ColorId", caption: "اللون",
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Colors/LoadColors", dataType: "json" }); }}, valueExpr: "ColorId", displayExpr: "ColorName" }
                },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "BranchId", caption: "الفرع",
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); }}, valueExpr: "BranchId", displayExpr: "BranchName" }
                },
            ],        
            editing: {
                allowDeleting: true,
                texts: {
                    confirmDeleteMessage: 'هل أنت متأكد من أنك تريد حذف هذا العنصر؟'
                }
            },
            columnAutoWidth: true,
            width: "100%",
            rtlEnabled: true,
            columnFixing: {
                enabled: true
            },
        });
    }

    function initializeItemsGrid2() {
        $("#transferItemsGrid").dxDataGrid({
            dataSource: invoiceItems,
            columns: [
                {
                    dataField: "ProductId", caption: "المنتج",
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/Products/LoadProducts", dataType: "json" }); } }, valueExpr: "ProductId", displayExpr: "ProductName" }
                },
                {
                    dataField: "SizeId", caption: "المقاس",
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/Sizes/LoadSizes", dataType: "json" }); } }, valueExpr: "SizeId", displayExpr: "SizeName" }
                },
                {
                    dataField: "ColorId", caption: "اللون",
                    lookup: { dataSource: { load: function () { return $.ajax({ url: "/Colors/LoadColors", dataType: "json" }); } }, valueExpr: "ColorId", displayExpr: "ColorName" }
                },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "FromBranchId", caption: "من فرع" ,
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); }}, valueExpr: "BranchId", displayExpr: "BranchName" }
                },
                { dataField: "ToBranchId", caption: "الي فرع" ,
                  lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); }}, valueExpr: "BranchId", displayExpr: "BranchName" }
                }
            ],
            editing: {
                allowDeleting: true,
                texts: {
                    confirmDeleteMessage: 'هل أنت متأكد من أنك تريد حذف هذا العنصر؟'
                }
            },
            columnAutoWidth: true,
            width: "100%",
            rtlEnabled: true,
            columnFixing: {
                enabled: true
            },
        });
    }

    function validateItem(item) {
        return item.ProductId && item.SizeId && item.ColorId && item.BranchId && !isNaN(item.Quantity);
    }

    function clearFormFields() {
        $('#ProductId').val('').trigger('change');
        $('#SizeId').val('').trigger('change');
        $('#ColorId').val('').trigger('change');
        $('#BranchId').val('').trigger('change');
        $('#Quantity').val('');
        $('#Notes').val('');
    }

    $(function () {
        var productDetailsPopup = $("#productDetailsPopup").dxPopup({
            title: "إدخال إلى المخزن / توالف(بدون فواتير)",
            visible: false,
            rtlEnabled: true,
            width: calculatePopupWidth(),
            height: calculatePopupHeight(),
            onShown: function () {
                initSelectBoxes();
            },
            toolbarItems: [{
                widget: 'dxButton',
                toolbar: 'top',
                location: 'after',
                options: {
                    icon: 'close',
                    onClick: function () {
                        productDetailsPopup.hide();
                    }
                }
            }]
        }).dxPopup("instance");


        function calculatePopupWidth() {
            var windowWidth = $(window).width();

            if (windowWidth < 768) {
                return "90%";
            } else {
                return 750;
            }
        }

        function calculatePopupHeight() {
            var windowHeight = $(window).height();
            if (windowHeight < 768) {
                return "90%";
            } else {
                return 600;
            }
        }


        $(window).resize(function () {
            productDetailsPopup.option({
                width: calculatePopupWidth(),
                height: calculatePopupHeight()
            });
        });

        // Array to hold invoice items
        var invoiceItems = [];

        initializeItemsGrid();

        // Function to open the popup
        window.showProductDetailsPopup = function () {
            productDetailsPopup.show();
        };

        window.addItemToGrid = function () {
            // Collect item details from form fields
            var item = {
                ProductId: $('#ProductId').val(),
                SizeId: $('#SizeId').val(),
                ColorId: $('#ColorId').val(),
                BranchId: $('#BranchId').val(),
                Quantity: $('#Quantity').val(),
                Notes: $('#Notes').val()
            };

            var isValid = validateItem(item);

            if (isValid) {
                // Check if Quantity is not zero
                if (parseInt(item.Quantity) !== 0) {
                    invoiceItems.push(item);
                    $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
                    clearFormFields();
                } else {
                  DevExpress.ui.notify("الكمية يجب ان لا تكون = 0","error", 3000);
                }
            } else {
                DevExpress.ui.notify("برجاء ملاء جميع البيانات","error", 3000);
            }
        };

        window.closePopup = function () {
            $("#productDetailsPopup").dxPopup("instance").hide();
            invoiceItems = [];
            clearFormFields();
            $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
        };

        // Populate dropdowns
        async function initSelectBoxes() {
            populateDropdown('/Products/LoadProducts', 'ProductId', 'ProductId', 'ProductName');
            populateDropdown('/Sizes/LoadSizes', 'SizeId', 'SizeId', 'SizeName');
            populateDropdown('/Colors/LoadColors', 'ColorId', 'ColorId', 'ColorName');
            populateDropdown('/Branches/LoadBranchesByUser', 'BranchId', 'BranchId', 'BranchName');
        }

        // Populate dropdowns
        async function initSelectBoxes2() {
            populateDropdown('/Products/LoadProducts', 'ProductId', 'ProductId', 'ProductName');
            populateDropdown('/Branches/LoadBranchesByUser', 'BranchId', 'BranchId', 'BranchName');
        }

        window.saveInvoice = async function () {
            $('#loadingIndicator').show();
            if (invoiceItems.length === 0) {
                $('#loadingIndicator').hide();
                 DevExpress.ui.notify("يرجى إضافة منتج واحد على الأقل قبل الحفظ.","error", 3000);
                return;
            }

            for (let item of invoiceItems) {
                let formData = new FormData();
                formData.append("values", JSON.stringify(item));

                try {
                    const response = await fetch('/PurchaseItems/AddNewPurchaseItem', {
                        method: 'POST',
                        body: formData,
                    });

                    const result = await response.json();

                    if (!result.success) {
                        DevExpress.ui.notify(result.message, "error", 3000);
                        $('#loadingIndicator').hide();
                        return;
                    }

                    DevExpress.ui.notify(result.message, "success", 3000);
                    $('#loadingIndicator').hide();
                    $("#gridContainer").dxDataGrid("instance").refresh();
                } catch (error) {
                    DevExpress.ui.notify(error, "error", 3000);
                    $('#loadingIndicator').hide();
                    return;
                }
            }

            invoiceItems = [];
            $("#invoiceItemsGrid").dxDataGrid("instance").option('dataSource', invoiceItems);
        };
    });
    /////////////////////////////////////

    $(function () {
        const factoryPopup = $("#factoryPopup").dxPopup({
            title: "تصنيع",
            visible: false,
            rtlEnabled: true,
            width: calculatePopupWidth(),
            height: calculatePopupHeight(),
            onShown: initSelectBoxes3,
            toolbarItems: [{
                widget: 'dxButton',
                toolbar: 'top',
                location: 'after',
                options: {
                    icon: 'close',
                    onClick: function () {
                        factoryPopup.hide();
                    }
                }
            }]
        }).dxPopup("instance");

        function calculatePopupWidth() {
            return $(window).width() < 768 ? "90%" : 750;
        }

        function calculatePopupHeight() {
            return $(window).height() < 768 ? "90%" : 600;
        }

        $(window).resize(function () {
            factoryPopup.option({
                width: calculatePopupWidth(),
                height: calculatePopupHeight()
            });
        });

        let factoryPopupItems = [];
        let invoiceGridInitialized = false;

        function initializeInvoiceGrid3() {
            $("#invoiceItemsGrid3").dxDataGrid({
                dataSource: factoryPopupItems,
                columns: [
                    {
                        dataField: "ProductId", caption: "المنتج",
                        lookup: { dataSource: { load: function () { return $.ajax({ url: "/Products/LoadProducts", dataType: "json" }); } }, valueExpr: "ProductId", displayExpr: "ProductName" }
                    },
                    {
                        dataField: "SizeId", caption: "المقاس",
                        lookup: { dataSource: { load: function () { return $.ajax({ url: "/Sizes/LoadSizes", dataType: "json" }); } }, valueExpr: "SizeId", displayExpr: "SizeName" }
                    },
                    {
                        dataField: "ColorId", caption: "اللون",
                        lookup: { dataSource: { load: function () { return $.ajax({ url: "/Colors/LoadColors", dataType: "json" }); } }, valueExpr: "ColorId", displayExpr: "ColorName" }
                    },
                    { dataField: "Quantity", caption: "الكمية" },
                    {
                        dataField: "BranchId", caption: "الفرع",
                        lookup: { dataSource: { load: function () { return $.ajax({ url: "/Branches/LoadBranches", dataType: "json" }); } }, valueExpr: "BranchId", displayExpr: "BranchName" }
                    },
                ],
                editing: {
                    allowDeleting: true,
                    texts: {
                        confirmDeleteMessage: 'هل أنت متأكد من أنك تريد حذف هذا العنصر؟'
                    }
                },
                columnAutoWidth: true,
                width: "100%",
                showBorders: true,
                rtlEnabled: true,
                columnFixing: {
                    enabled: true
                },
            });
            invoiceGridInitialized = true;

        }

        function addItemToGrid3() {
            const item3 = {
                ProductId: $('#ProductId3').val(),
                SizeId: $('#SizeId3').val(),
                ColorId: $('#ColorId3').val(),
                BranchId: $('#BranchId3').val(),
                Quantity: $('#Quantity3').val(),
                Notes: $('#Notes3').val()
            };

            const isValid = validateItem(item3);

            if (isValid) {
                if (parseInt(item3.Quantity) !== 0) {
                    factoryPopupItems.push(item3);
                    if (!invoiceGridInitialized) {
                        initializeInvoiceGrid3();
                    }
                    $("#invoiceItemsGrid3").dxDataGrid("instance").option('dataSource', factoryPopupItems);
                    clearFormFields3();
                } else {
                    DevExpress.ui.notify("الكمية يجب ان لا تكون = 0", "error", 3000);
                }
            } else {
                DevExpress.ui.notify("برجاء ملاء جميع البيانات", "error", 3000);
            }
        }

        async function saveInvoice3() {
            $('#loadingIndicator').show();
            if (factoryPopupItems.length === 0) {
                $('#loadingIndicator').hide();
                DevExpress.ui.notify("يرجى إضافة منتج واحد على الأقل قبل الحفظ.", "error", 3000);
                return;
            }

            for (let item of factoryPopupItems) {
                const formData = new FormData();
                formData.append("values", JSON.stringify(item));

                try {
                    const response = await fetch('/PurchaseItems/AddNewFactoryItem', {
                        method: 'POST',
                        body: formData,
                    });

                    const result = await response.json();

                    if (!result.success) {
                        DevExpress.ui.notify(result.message, "error", 3000);
                        $('#loadingIndicator').hide();
                        return;
                    }

                    DevExpress.ui.notify(result.message, "success", 3000);
                } catch (error) {
                    DevExpress.ui.notify(error, "error", 3000);
                    $('#loadingIndicator').hide();
                    return;
                }
            }

            factoryPopupItems.length = 0;
            $("#invoiceItemsGrid3").dxDataGrid("instance").option('dataSource', factoryPopupItems);
            $("#gridContainer").dxDataGrid("instance").refresh();
            $('#loadingIndicator').hide();
        }

        function initSelectBoxes3() {
            populateDropdown('/Products/GetAllProductsInWarehouse', 'ProductId3', 'ProductId', 'ProductName');
            populateDropdown('/Branches/LoadBranchesByUser', 'BranchId3', 'BranchId', 'BranchName');
            initializeInvoiceGrid3();
        }

        window.closeFactoryPopup = function () {
            factoryPopup.hide();
            factoryPopupItems.length = 0;
            $("#invoiceItemsGrid3").dxDataGrid("instance").option('dataSource', factoryPopupItems);
        };

        window.showfactoryPopup = function () {
            factoryPopup.show();
        };

        window.addItemToGrid3 = addItemToGrid3;
        window.saveInvoice3 = saveInvoice3;
        window.closePopup3 = function () {
            $("#factoryPopup").dxPopup("instance").hide();
            factoryPopupItems = [];
            clearFormFields3();
            $("#invoiceItemsGrid3").dxDataGrid("instance").option('dataSource', factoryPopupItems);
        };
    });

    function clearFormFields3() {
        $('#ProductId3').val('').trigger('change');
        $('#SizeId3').val('').trigger('change');
        $('#ColorId3').val('').trigger('change');
        $('#BranchId3').val('').trigger('change');
        $('#Quantity3').val('');
        $('#Notes3').val('');
    }

    $(document).ready(function () {
        $('#ProductId3, #SizeId3, #ColorId3, #BranchId3').change(function () {
            var productId = $('#ProductId3').val();
            var sizeId = $('#SizeId3').val();
            var colorId = $('#ColorId3').val();
            var branchId = $('#BranchId3').val();

            if (productId && sizeId && colorId && branchId) {
                fetchAvailableQuantity(productId, sizeId, colorId, branchId, '#availableQtyDisplay3');
            } else {
                $('#availableQtyDisplay3').text(`الكمية المتاحة: 0`);
            }
        });

        $('#ProductId3').change(function () {
            productChanged3();
        });
    });

    function productChanged3() {
        var productId = $('#ProductId3').val();

        populateDropdown(`/Products/GetAvailableSizes?ProductId=${productId}`, 'SizeId3', 'SizeId', 'SizeName', null);
        populateDropdown(`/Products/GetAvailableColors?ProductId=${productId}`, 'ColorId3', 'ColorId', 'ColorName', null);
    }
</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<style>
    .custom-badge-danger {
        background-color: #dc3545; /* Bootstrap's danger color */
        color: white;
        border-radius: 100%; /* Makes the badge circular */
        padding: 0.25em 0.6em; /* Adjusts the padding to ensure the circle shape */
        font-size: 0.75em; /* Adjusts the font size */
    }

    .select2-container--open {
        z-index: 9999999 !important;
    }
</style>
