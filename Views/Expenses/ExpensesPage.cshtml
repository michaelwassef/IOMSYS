@{
    ViewData["Title"] = "ExpensesPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>المصروفات</h1>
</div>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="BranchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>

<div id="gridContainer"></div>

<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const apiUrl = '/Expenses/LoadExpensesByBranch?branchId=';
        const branchesUrl = '/Branches/LoadBranchesByUser';
        const paymentMethodsUrl = '/PaymentMethods/LoadPaymentMethods';
        const usersUrl = '/Users/LoadUsers';
        const branchesDropdown = document.getElementById('BranchId');
        const gridContainer = $("#gridContainer");

        async function fetchData(url) {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Network response was not ok.');
            return await response.json();
        }

        function populateDropdown(data) {
            const options = data.map(item => `<option value="${item.BranchId}">${item.BranchName}</option>`).join('');
            branchesDropdown.innerHTML = options;
        }

        function initializeDataGrid(branchId) {
            gridContainer.dxDataGrid({
                dataSource: DevExpress.data.AspNet.createStore({
                    key: "ExpensesId",
                    loadUrl: apiUrl + branchId,
                    insertUrl: "/Expenses/AddNewExpense",
                    updateUrl: "/Expenses/UpdateExpense",
                    deleteUrl: "/Expenses/DeleteExpense",
                    onBeforeSend: function (method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                    }
                }),
                columns: [
                    { dataField: "ExpensesName", caption: "البند", width: 150, validationRules: [{ type: "required" }] },
                    { dataField: "ExpensesAmount", caption: "المبلغ", width: 100, dataType: "number", validationRules: [{ type: "required" }] },
                    { dataField: "Notes", caption: "ملاحظات", width: 200 },
                    {
                        dataField: "PaymentMethodId", caption: "طريقة الدفع", width: 150,
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "PaymentMethodId",
                                loadUrl: "/PaymentMethods/LoadPaymentMethods"
                            }),
                            valueExpr: "PaymentMethodId",
                            displayExpr: "PaymentMethodName"
                        },
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "BranchId", caption: "اسم الفرع", width: 150,
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "BranchId",
                                loadUrl: "/Branches/LoadBranches"
                            }),
                            valueExpr: "BranchId",
                            displayExpr: "BranchName"
                        },
                        validationRules: [{ type: "required" }]
                    },
                    { dataField: "PurchaseDate", caption: "تاريخ المعاملة", width: 150, dataType: "date", allowEditing: false },
                    {
                        dataField: "UserId", caption: "مدخل المعاملة", width: 150, allowEditing: false,
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "UserId",
                                loadUrl: "/Users/LoadUsers"
                            }),
                            valueExpr: "UserId",
                            displayExpr: "UserName"
                        }
                    }
                ],
                rtlEnabled: true,
                paging: { pageSize: 10 },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 25, 50, 100]
                },
                searchPanel: { visible: true, highlightCaseSensitive: true },
                groupPanel: { visible: false },
                rowAlternationEnabled: true,
                width: "100%",
                showBorders: true,
                columnFixing: {
                    enabled: true
                },
                editing: {
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                    mode: "popup",
                    popup: {
                        title: "المصروف",
                        showTitle: true,
                        width: 700,
                        height: 530,
                    },
                },
                onEditorPreparing: function (e) {
                    if (e.parentType === "dataRow" && (e.dataField === "PurchaseDate" || e.dataField === "UserId")) {
                        e.editorOptions.visible = false;
                    }

                    if (e.parentType === "dataRow" && e.dataField === "BranchId") {
                        e.editorOptions.dataSource = DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranchesByUser"
                        });
                    }
                },
                export: {
                    enabled: true,
                    allowExportSelectedData: true
                },
                onExporting: function (e) {
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Expenses');

                    DevExpress.excelExporter.exportDataGrid({
                        component: e.component,
                        worksheet: worksheet,
                        autoFilterEnabled: true
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "Expenses.xlsx");
                        });
                    });
                    e.cancel = true;
                },
            });

        }

        async function init() {
            try {
                const branchesData = await fetchData(branchesUrl);
                populateDropdown(branchesData);
                const defaultBranchId = branchesData.length > 0 ? branchesData[0].BranchId : null;
                if (defaultBranchId) initializeDataGrid(defaultBranchId);

                branchesDropdown.addEventListener('change', function () {
                    initializeDataGrid(this.value);
                });
            } catch (error) {
                console.error('Error loading data:', error);
            }
        }

        init();
    });
</script>
