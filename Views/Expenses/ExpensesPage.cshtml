@{
    ViewData["Title"] = "ExpensesPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>المصروفات</h1>
</div>

<div class="container my-4">
    <div class="row align-items-end">
        <!-- Branch Selection -->
        <div class="col-md-3">
            <div class="form-group">
                <label for="BranchId">اسم الفرع</label>
                <select id="BranchId" class="form-control"></select>
            </div>
        </div>

        <!-- From Date -->
        <div class="col-md-3">
            <div class="form-group">
                <label for="fromDate" class="font-weight-bold">من تاريخ:</label>
                <div id="fromDate" class="custom-date-box"></div>
            </div>
        </div>

        <!-- To Date -->
        <div class="col-md-3">
            <div class="form-group">
                <label for="toDate" class="font-weight-bold">الي تاريخ:</label>
                <div id="toDate" class="custom-date-box"></div>
            </div>
        </div>
    </div>
</div>

<div id="gridContainer"></div>

<script>
    $(function () {
        initializePage();
    });

    function initializePage() {
        initializeDateBoxes();
        loadBranches();
    }

    function initializeDateBoxes() {
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);

        $("#fromDate").dxDateBox({
            type: "date",
            value: startOfDay,
            displayFormat: "yyyy-MM-dd",
            onValueChanged: function () {
                $("#gridContainer").dxDataGrid("instance").refresh();
            }
        });

        $("#toDate").dxDateBox({
            type: "date",
            value: endOfDay,
            displayFormat: "yyyy-MM-dd",
            onValueChanged: function () {
                $("#gridContainer").dxDataGrid("instance").refresh();
            }
        });
    }

    function loadBranches() {
        $.get('/Branches/LoadBranchesByUser', function (data) {
            const selectElement = $('#BranchId');
            selectElement.empty();
            data.forEach(item => {
                selectElement.append(new Option(item.BranchName, item.BranchId));
            });
            selectElement.change();
        }).fail(function () {
            console.error('Unable to load branches.');
        });
    }

    function populateDropdownData(data) {
        const selectElement = document.getElementById('BranchId');
        selectElement.innerHTML = '';
        data.forEach(item => {
            const option = new Option(item['BranchName'], item['BranchId']);
            selectElement.add(option);
        });
    }

    function loadDataForGrid() {
        const fromDateValue = $("#fromDate").dxDateBox("instance").option("value");
        const toDateValue = $("#toDate").dxDateBox("instance").option("value");

        const fromDate = formatDateAsISO(fromDateValue, true);
        const toDate = formatDateAsISO(toDateValue, false);

        const branchId = $('#BranchId').val();

        return $.getJSON('/Expenses/LoadExpensesByBranchAndDate', { branchId, FromDate: fromDate, ToDate: toDate })
            .fail(function () {
                DevExpress.ui.notify("Data Loading Error", "error", 3000);
            });
    }

    function formatDateAsISO(date, startOfDay) {
        const year = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        let hour, minutes, seconds;

        if (startOfDay) {
            hour = '00';
            minutes = '00';
            seconds = '00';
        } else {
            hour = '23';
            minutes = '59';
            seconds = '59';
        }
        return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')} ${hour}:${minutes}:${seconds}`;
    }

    $('#BranchId').change(function () {
        $("#gridContainer").dxDataGrid("instance").refresh();
    });

    $(function () {
        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "ExpensesId",
                load: function (loadOptions) {
                    return loadDataForGrid().then(function (data) {
                        return data;
                    });
                },
                insert: function (values) {
                    var url = '/Expenses/AddNewExpense';
                    var dataToSend = JSON.stringify({ values: values });
                    return $.ajax({
                        url: url,
                        method: 'POST',
                        contentType: 'application/json',
                        data: dataToSend
                    })
                    .done(function (response) {
                        if (response.SuccessMessage) {
                            DevExpress.ui.notify(response.SuccessMessage, "success", 3000);
                        }
                    })
                    .fail(function (jqXHR) {
                        if (jqXHR.responseJSON && jqXHR.responseJSON.ErrorMessage) {
                            DevExpress.ui.notify(jqXHR.responseJSON.ErrorMessage, "error", 3000);
                        } else {
                            DevExpress.ui.notify("An error occurred while adding the expense.", "error", 3000);
                        }
                    });
                },
                update: function (key, values) {
                    var url = '/Expenses/UpdateExpense?key=' + encodeURIComponent(key);
                    var dataToSend = JSON.stringify({ values: values });
                    return $.ajax({
                        url: url,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: dataToSend
                    })
                    .done(function (response) {
                        if (response.SuccessMessage) {
                            DevExpress.ui.notify(response.SuccessMessage, "success", 3000);
                        }
                    })
                    .fail(function (jqXHR) {
                        if (jqXHR.responseJSON && jqXHR.responseJSON.ErrorMessage) {
                            DevExpress.ui.notify(jqXHR.responseJSON.ErrorMessage, "error", 3000);
                        }
                    });
                },
                remove: function (key) {
                    return $.ajax({
                        url: '/Expenses/DeleteExpense?key=' + encodeURIComponent(key),
                        method: 'DELETE',
                        contentType: 'application/json'
                    })
                    .done(function (response) {
                        if (response && response.SuccessMessage) {
                            DevExpress.ui.notify(response.SuccessMessage, "success", 3000);
                        }
                    })
                    .fail(function (jqXHR) {
                        if (jqXHR.responseJSON && jqXHR.responseJSON.ErrorMessage) {
                            DevExpress.ui.notify(jqXHR.responseJSON.ErrorMessage, "error", 3000);
                        }
                    });
                }

            }),
            columns: [
                { dataField: "ExpensesName", caption: "البند", validationRules: [{ type: "required" }] },
                { dataField: "ExpensesAmount", caption: "المبلغ", dataType: "number", validationRules: [{ type: "required" }] },
                { dataField: "Notes", caption: "ملاحظات" },
                {
                    dataField: "PaymentMethodId", caption: "طريقة الدفع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    },
                    validationRules: [{ type: "required" }]
                },
                {
                    dataField: "BranchId", caption: "اسم الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    },
                    validationRules: [{ type: "required" }]
                },
                { dataField: "PurchaseDate", caption: "تاريخ المعاملة", dataType: "datetime", allowEditing: false },
                {
                    dataField: "UserId", caption: "مدخل المعاملة", allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                }
            ],
            headerFilter: {
                visible: true
                ,allowSearch: true
            },
            HeaderFilter: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            rtlEnabled: true,
            width: "100%",
            columnAutoWidth: true,
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            showBorders: true,
            columnFixing: {
                enabled: true
            },
            editing: {
                allowAdding: true,
                allowUpdating: true,
                allowDeleting: true,
                mode: "popup",
                popup: {
                    title: "المصروف",
                    showTitle: true,
                    width: 700,
                    height: 530,
                },
            },
            onEditorPreparing: function (e) {
                if (e.parentType === "dataRow" && (e.dataField === "PurchaseDate" || e.dataField === "UserId")) {
                    e.editorOptions.visible = false;
                }
        
                if (e.parentType === "dataRow" && e.dataField === "BranchId") {
                    e.editorOptions.dataSource = DevExpress.data.AspNet.createStore({
                        key: "BranchId",
                        loadUrl: "/Branches/LoadBranchesByUser"
                    });
                }
            },
            summary: {
                totalItems: [
                    {
                        column: "ExpensesName",
                        summaryType: "count",
                        displayFormat: "عدد المصروفات : {0}"
                    },
                    {
                        column: "ExpensesAmount",
                        summaryType: "sum",
                        displayFormat: "اجمالي المبالغ المصروفة : {0}"
                    }
                ]
            },
            export: {
                enabled: true,
                allowExportSelectedData: true
            },
            onExporting: function (e) {
                const workbook = new ExcelJS.Workbook();
                const worksheet = workbook.addWorksheet('Expenses');
        
                DevExpress.excelExporter.exportDataGrid({
                    component: e.component,
                    worksheet: worksheet,
                    autoFilterEnabled: true
                }).then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), "Expenses.xlsx");
                    });
                });
                e.cancel = true;
            },
        });
        
        initializeDateBoxes3();
        
        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });
</script>
<style>
    .dx-rtl .dx-datagrid {
        overflow-x: auto;
    }
</style>