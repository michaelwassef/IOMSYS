
@{
    ViewData["Title"] = "SalesPage";
    Layout = "_DevExtremeLayout";
}

<h1>فواتير المبيعات</h1>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>

@(Html.DevExtreme().DataGrid<SalesInvoicesModel>()
    .ID("gridContainer")
    .DataSource(d => d
        .Mvc()
        .Controller("SalesInvoices")
        @*.LoadAction("LoadSalesInvoices")*@
        .LoadAction("LoadSalesInvoicesByBranch")
        .UpdateAction("UpdateSaleInvoice")
        .DeleteAction("DeleteSaleInvoice")
        .Key("SalesInvoiceId")
    ).OnToolbarPreparing("onToolbarPreparing")
    .Selection(s => s.Mode(SelectionMode.Multiple))
     .Export(e => e.Enabled(true).AllowExportSelectedData(true))
     .OnExporting("exporting")
     .AllowColumnResizing(true)
     .ColumnAutoWidth(true)
     .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        .AllowUpdating(true)
        .Popup(p => p
                .Title("فاتورة مبيعات")
                .ShowTitle(true)
                .Width(800)
                .Height(700))
    )
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.SalesInvoiceId).Caption("رقم الفاتورة").AllowEditing(false);
        columns.AddFor(m => m.TotalAmount).Caption("اجمالي الفاتورة بعد الخصم").AllowEditing(false);
        columns.AddFor(m => m.TotalDiscount).Caption("اجمالي الخصم").AllowEditing(false);
        columns.AddFor(m => m.PaidUp).Caption("المدفوع من الفاتورة");
        columns.AddFor(m => m.Remainder).Caption("الباقي من المبلغ");
        columns.AddFor(m => m.CustomerId).Caption("اسم الزبون").Lookup(lookup => lookup
          .DataSource(d => d.Mvc().Controller("Customers").LoadAction("LoadCustomers"))
          .ValueExpr("CustomerId")
          .DisplayExpr("CustomerName"));
        columns.AddFor(m => m.BranchId).Caption("اسم الفرع").Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Branches").LoadAction("LoadBranches"))
       .ValueExpr("BranchId")
       .DisplayExpr("BranchName"));
        columns.AddFor(m => m.PaymentMethodId).Caption("طريقة الدفع").Lookup(lookup => lookup
         .DataSource(d => d.Mvc().Controller("PaymentMethods").LoadAction("LoadPaymentMethods"))
         .ValueExpr("PaymentMethodId")
         .DisplayExpr("PaymentMethodName"));
        columns.AddFor(m => m.SaleDate).Caption("تاريخ الفاتورة");
        columns.AddFor(m => m.UserId).Caption("مدخل الفاتورة").AllowEditing(false).Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Users").LoadAction("LoadUsers"))
       .ValueExpr("UserId")
       .DisplayExpr("UserName"));
    }).MasterDetail(md =>
    {
        md.Enabled(true);
        md.Template(@<text>
            @(Html.DevExtreme().DataGrid<SalesItemsModel>()
        .ColumnAutoWidth(true)
        .ShowBorders(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.ProductName).Caption("اسم المنتج");

            columns.AddFor(m => m.SizeName).Caption("المقاس");

            columns.AddFor(m => m.ColorName).Caption("اللون");

            columns.AddFor(m => m.Quantity).Caption("الكمية");

            columns.AddFor(m => m.SellPrice).Caption("سعر البيع للواحد");

            columns.AddFor(m => m.ItemDiscount).Caption("مبلغ الخصم للواحد");
        })
        .DataSource(d => d.Mvc()
        .Controller("SalesItems")
        .LoadAction("LoadSaleItemsByInvoiceId")
        .Key("SalesItemId")
        .DeleteAction("DeleteSaleItem")
        .LoadParams(new { SalesInvoiceId = new JS("data.SalesInvoiceId") }))
        .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        )
        .RtlEnabled(true)
        )
            </text>);
    })
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
                .Column("رقم الفاتورة")
                .SummaryType(SummaryType.Count)
                .DisplayFormat("عدد الفواتير : {0}");

            items.Add()
            .Column("اجمالي الفاتورة بعد الخصم")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ الفواتير : {0}");

            items.Add()
            .Column("المدفوع من الفاتورة")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي المدفوع : {0}");

            items.Add()
           .Column("الباقي من المبلغ")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي المتبقي : {0}");
        })
    )
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('SalesInvoices');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'SalesInvoices.xlsx');
            });
        });
    }

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;

        var addButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتورة مبيعات جديدة',
                onClick: function () {
                    window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                }
            },
            location: 'after',
            name: 'addButton'
        };

        var pdfButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-file-pdf',
                text: 'طباعة فاتورة PDF',
                onClick: function () {
                    var selectedRowKeys = $("#gridContainer").dxDataGrid("instance").getSelectedRowKeys();
                    if (selectedRowKeys.length > 0) {
                        var invoiceId = selectedRowKeys[0];
                        generatePDFReport(invoiceId);
                    } else {
                        DevExpress.ui.notify("يرجى تحديد فاتورة لإنشاء التقرير", "error", 1500);
                    }
                }
            },
            location: 'after',
            name: 'pdfButton'
        };

        toolbarItems.push(addButton);
        toolbarItems.push(pdfButton);
    }


    async function generatePDFReport(invoiceId) {
        try {
            const response = await fetch(`/SalesInvoices/SaleInvoiceReport?invoiceId=${invoiceId}`);
            if (!response.ok) {
                console.error('Failed to generate PDF report');
                return;
            }
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `SaleInvoice_${invoiceId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Error generating PDF report:', error);
        }
    }

   document.addEventListener('DOMContentLoaded', async function () {
    try {
        // Load branches data
        const branchesResponse = await fetch('/Branches/LoadBranches');
        if (!branchesResponse.ok) {
            console.error('Failed to load branches data');
            return;
        }
        const branchesData = await branchesResponse.json();

        // Populate branches dropdown
        populateDropdownData(branchesData);

        // Set the default branch to the first option
        const defaultBranchId = branchesData.length > 0 ? branchesData[0]['BranchId'] : null;
        if (defaultBranchId) {
            const loadUrl = `/SalesInvoices/LoadSalesInvoicesByBranch?branchId=${defaultBranchId}`;
            loadSalesInvoices(loadUrl);
        }

        // Event listener for branch selection change
        $('#BranchId').change(function () {
            const branchId = $(this).val();
            const loadUrl = `/SalesInvoices/LoadSalesInvoicesByBranch?branchId=${branchId}`;
            loadSalesInvoices(loadUrl);
        });
        } catch (error) {
            console.error('Error loading data:', error);
        }
    });

   function populateDropdownData(data) {
       const selectElement = document.getElementById('BranchId');
       selectElement.innerHTML = '';
       data.forEach(item => {
           const option = new Option(item['BranchName'], item['BranchId']);
           selectElement.add(option);
       });
   }

   async function loadSalesInvoices(url) {
       try {
           const salesInvoicesResponse = await fetch(url);
           if (!salesInvoicesResponse.ok) {
               console.error('Failed to load sales invoices data');
               return;
           }
           const salesInvoicesData = await salesInvoicesResponse.json();

           $("#gridContainer").dxDataGrid("instance").option("dataSource", {
               load: function () {
                   return salesInvoicesData;
               },
               key: "SalesInvoiceId"
           });
       } catch (error) {
           console.error('Error loading sales invoices:', error);
       }
   }

</script>
