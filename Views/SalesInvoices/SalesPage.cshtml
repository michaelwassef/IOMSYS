
@{
    ViewData["Title"] = "SalesPage";
    Layout = "_DevExtremeLayout";
}

<h1>فواتير المبيعات</h1>

@(Html.DevExtreme().DataGrid<SalesInvoicesModel>()
    .ID("gridContainer")
    .DataSource(d => d
        .Mvc()
        .Controller("SalesInvoices")
        .LoadAction("LoadSalesInvoices")
        .UpdateAction("UpdateSaleInvoice")
        .DeleteAction("DeleteSaleInvoice")
        .Key("SalesInvoiceId")
    ).OnToolbarPreparing("onToolbarPreparing")
    .Selection(s => s.Mode(SelectionMode.Multiple))
     .Export(e => e.Enabled(true).AllowExportSelectedData(true))
     .OnExporting("exporting")
     .AllowColumnResizing(true)
     .ColumnAutoWidth(true)
     .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        .AllowUpdating(true)
        .Popup(p => p
                .Title("فاتورة مبيعات")
                .ShowTitle(true)
                .Width(800)
                .Height(700))
    )
    .RtlEnabled(true)
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 25, 50, 100 })
    )
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.SalesInvoiceId).Caption("رقم الفاتورة").AllowEditing(false);
        columns.AddFor(m => m.TotalAmount).Caption("اجمالي الفاتورة بعد الخصم").AllowEditing(false);
        columns.AddFor(m => m.TotalDiscount).Caption("اجمالي الخصم").AllowEditing(false);
        columns.AddFor(m => m.PaidUp).Caption("المدفوع من الفاتورة");
        columns.AddFor(m => m.Remainder).Caption("الباقي من المبلغ");
        columns.AddFor(m => m.CustomerId).Caption("اسم الزبون").Lookup(lookup => lookup
          .DataSource(d => d.Mvc().Controller("Customers").LoadAction("LoadCustomers"))
          .ValueExpr("CustomerId")
          .DisplayExpr("CustomerName"));
        columns.AddFor(m => m.BranchId).Caption("اسم الفرع").Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Branches").LoadAction("LoadBranches"))
       .ValueExpr("BranchId")
       .DisplayExpr("BranchName"));
        columns.AddFor(m => m.PaymentMethodId).Caption("طريقة الدفع").Lookup(lookup => lookup
         .DataSource(d => d.Mvc().Controller("PaymentMethods").LoadAction("LoadPaymentMethods"))
         .ValueExpr("PaymentMethodId")
         .DisplayExpr("PaymentMethodName"));
        columns.AddFor(m => m.SaleDate).Caption("تاريخ الفاتورة");
        columns.AddFor(m => m.UserId).Caption("مدخل الفاتورة").AllowEditing(false).Lookup(lookup => lookup
       .DataSource(d => d.Mvc().Controller("Users").LoadAction("LoadUsers"))
       .ValueExpr("UserId")
       .DisplayExpr("UserName"));
    }).MasterDetail(md =>
    {
        md.Enabled(true);
        md.Template(@<text>
            @(Html.DevExtreme().DataGrid<SalesItemsModel>()
        .ColumnAutoWidth(true)
        .ShowBorders(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.ProductName).Caption("اسم المنتج");

            columns.AddFor(m => m.SizeName).Caption("المقاس");

            columns.AddFor(m => m.ColorName).Caption("اللون");

            columns.AddFor(m => m.Quantity).Caption("الكمية");

            columns.AddFor(m => m.SellPrice).Caption("سعر البيع للواحد");

            columns.AddFor(m => m.ItemDiscount).Caption("مبلغ الخصم للواحد");
        })
        .DataSource(d => d.Mvc()
        .Controller("SalesItems")
        .LoadAction("LoadSaleItemsByInvoiceId")
        .Key("SalesItemId")
        .DeleteAction("DeleteSaleItem")
        .LoadParams(new { SalesInvoiceId = new JS("data.SalesInvoiceId") }))
        .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        )
        .RtlEnabled(true)
        )
            </text>);
    })
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
                .Column("رقم الفاتورة")
                .SummaryType(SummaryType.Count)
                .DisplayFormat("عدد الفواتير : {0}");

            items.Add()
            .Column("اجمالي الفاتورة بعد الخصم")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ الفواتير : {0}");

            items.Add()
            .Column("المدفوع من الفاتورة")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي المدفوع : {0}");

            items.Add()
           .Column("الباقي من المبلغ")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي المتبقي : {0}");
        })
    )
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('SalesInvoices');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'SalesInvoices.xlsx');
            });
        });
    }

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        var customButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مبيعات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                }
            },
            location: 'before',
            name: 'customButton'
        };
        toolbarItems.push(customButton);
    }
</script>
