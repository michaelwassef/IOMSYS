
@{
    ViewData["Title"] = "SalesPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>فواتير المبيعات</h1>
</div>

<div class="row">
    <div class="form-group col-md-3 mb-3">
        <label for="branchId">اسم الفرع</label>
        <select id="BranchId" class="form-control"></select>
    </div>
</div>
<div class="row justify-content-center">
<button type="button" onclick="returnProdutsPage()" class="btn col-md-2 btn-primary btn-block my-1 mx-1">عرض مرتجعات الفروع</button>
</div>

@(Html.DevExtreme().DataGrid<SalesInvoicesModel>()
    .ID("gridContainer")
    .OnToolbarPreparing("onToolbarPreparing")
    .Selection(s => s.Mode(SelectionMode.Multiple))
     .Export(e => e.Enabled(true).AllowExportSelectedData(true))
     .OnExporting("exporting")
     .AllowColumnResizing(true)
     .ColumnAutoWidth(true)
     .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
    )
    .RtlEnabled(true)
    .SearchPanel(s => s
        .Visible(true)
        .HighlightCaseSensitive(true)
    )
    .GroupPanel(g => g.Visible(false))
    .RowAlternationEnabled(true)
    .Width("100%")
    .ShowBorders(true)
    .MasterDetail(md =>
    {
        md.Enabled(true);
        md.Template(@<text>
            @(Html.DevExtreme().DataGrid<SalesItemsModel>()
        .ColumnAutoWidth(true)
        .ShowBorders(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.ProductName).Caption("اسم المنتج");

            columns.AddFor(m => m.SizeName).Caption("المقاس");

            columns.AddFor(m => m.ColorName).Caption("اللون");

            columns.AddFor(m => m.Quantity).Caption("الكمية");

            columns.AddFor(m => m.SellPrice).Caption("سعر البيع للواحد");

            columns.AddFor(m => m.ItemDiscount).Caption("مبلغ الخصم للواحد");
        })
        .DataSource(d => d.Mvc()
        .Controller("SalesItems")
        .LoadAction("LoadSaleItemsByInvoiceId")
        .Key("SalesItemId")
        .DeleteAction("DeleteSaleItem")
        .LoadParams(new { SalesInvoiceId = new JS("data.SalesInvoiceId") }))
        .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowDeleting(true)
        )
        .RtlEnabled(true)
        )
            </text>);
    })
    .ColumnFixing(columnFixing =>{columnFixing.Enabled(true);})
    .HeaderFilter(f => f.Visible(true))
    .Summary(summary => summary
        .TotalItems(items =>
        {
            items.Add()
                .Column("رقم الفاتورة")
                .SummaryType(SummaryType.Count)
                .DisplayFormat("عدد الفواتير : {0}");

            items.Add()
            .Column("اجمالي الفاتورة بعد الخصم")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي مبلغ الفواتير : {0}");

            items.Add()
            .Column("المدفوع من الفاتورة")
            .SummaryType(SummaryType.Sum)
            .DisplayFormat("اجمالي المدفوع : {0}");

            items.Add()
           .Column("الباقي من المبلغ")
           .SummaryType(SummaryType.Sum)
           .DisplayFormat("اجمالي المتبقي : {0}");
        })
    )
)

<script>
    function returnProdutsPage() {
        window.location.href = '@Url.Action("ReturnSalesPage", "SalesInvoices")';
    }

    function openReturnInvoice(invoiceId) {
        const returnInvoiceUrl = `/SalesInvoices/ReturnInvoice?invoiceId=${invoiceId}`;
        window.location.href = returnInvoiceUrl;
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('SalesInvoices');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'SalesInvoices.xlsx');
            });
        });
    }

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;

        var addButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتورة مبيعات جديدة',
                onClick: function () {
                    window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                }
            },
            location: 'after',
            name: 'addButton'
        };

        var pdfButton = {
            widget: 'dxButton',
            options: {
                icon: 'fas fa-file-pdf',
                text: 'طباعة فاتورة PDF',
                onClick: function () {
                    var selectedRowKeys = $("#gridContainer").dxDataGrid("instance").getSelectedRowKeys();
                    if (selectedRowKeys.length > 0) {
                        var invoiceId = selectedRowKeys[0];
                        generatePDFReport(invoiceId);
                    } else {
                        DevExpress.ui.notify("يرجى تحديد فاتورة لإنشاء التقرير", "error", 1500);
                    }
                }
            },
            location: 'after',
            name: 'pdfButton'
        };

        toolbarItems.push(addButton);
        toolbarItems.push(pdfButton);
    }

    async function generatePDFReport(invoiceId) {
        $('#loadingIndicator').show();
        try {
            const response = await fetch(`/SalesInvoices/SaleInvoiceReport?invoiceId=${invoiceId}`);
            if (!response.ok) {
                DevExpress.ui.notify('حدث خطأ اثناء فتح الفاتوره', "error", 3000);
                $('#loadingIndicator').hide();
                return;
            }
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `SaleInvoice_${invoiceId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            $('#loadingIndicator').hide();
        } catch (error) {
           DevExpress.ui.notify(error, "error", 3000);
           $('#loadingIndicator').hide();
        }
    }

    $(function () {
        $.getJSON('/Branches/LoadBranchesByUser', function (data) {
            var branchSelect = $('#BranchId');
            $.each(data, function () {
                branchSelect.append($('<option/>').val(this.BranchId).text(this.BranchName));
            });
        });

        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "SalesInvoiceId",
                load: function (loadOptions) {
                    var d = $.Deferred();
                    var params = { branchId: $('#BranchId').val() };

                    $.getJSON('/SalesInvoices/LoadSalesInvoicesByBranch', params)
                        .done(function (result) { d.resolve(result); })
                        .fail(function () { d.reject("Data Loading Error"); });

                    return d.promise();
                },
                onRowUpdating: function (e) {
                    var oldData = e.oldData;
                    var newData = e.newData;
                    e.newData = Object.assign({}, oldData, newData);
                },
                update: function (key, values) {
                    return $.ajax({
                        url: '/SalesInvoices/UpdateSaleInvoice',
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            ...values,
                            SalesInvoiceId: key,
                        })
                    });
                },
                remove: function (key) {
                    return $.ajax({
                        url: '/SalesInvoices/DeleteSaleInvoice?invoiceId=' + encodeURIComponent(key),
                        method: 'DELETE'
                    });
                }
            }),
            showBorders: true,
            paging: {
                pageSize: 30
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50]
            },
            columns: [
                {
                    caption: "استرجاع",
                    cellTemplate: function (container, options) {
                        $("<a>").addClass("dx-link")
                            .text("استرجاع الفاتورة")
                            .on("click", function () {
                                window.location.href = "/SalesInvoices/ReturnInvoice?invoiceId=" + options.data.SalesInvoiceId;
                            })
                            .appendTo(container);
                    }
                },
                {
                    dataField: "SalesInvoiceId",
                    caption: "رقم الفاتورة"
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة بعد الخصم"
                },
                {
                    dataField: "TotalDiscount",
                    caption: "اجمالي الخصم"
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ"
                },
                {
                    dataField: "CustomerId",
                    caption: "اسم العميل",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "CustomerId",
                            loadUrl: "/Customers/LoadCustomers"
                        }),
                        valueExpr: "CustomerId",
                        displayExpr: "CustomerName"
                    }
                },
                {
                    dataField: "Notes",
                    caption: "ملاحظات"
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "الخزنة",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "SaleDate",
                    caption: "تاريخ الفاتوره",
                    dataType: "date"
                },
                {
                    dataField: "PaidUpDate",
                    caption: "تاريخ التحصيل",
                    dataType: "date"
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتوره",
                        allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
            ],
            onToolbarPreparing: function (e) {
                var toolbarItems = e.toolbarOptions.items;

                var addButton = {
                    widget: 'dxButton',
                    options: {
                        icon: 'fas fa-plus',
                        text: 'اضافة فاتورة مبيعات جديدة',
                        onClick: function () {
                            window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                        }
                    },
                    location: 'after',
                    name: 'addButton'
                };

                var pdfButton = {
                    widget: 'dxButton',
                    options: {
                        icon: 'fas fa-file-pdf',
                        text: 'طباعة فاتورة',
                        onClick: function () {
                            var selectedRowKeys = $("#gridContainer").dxDataGrid("instance").getSelectedRowKeys();
                            if (selectedRowKeys.length > 0) {
                                var invoiceId = selectedRowKeys[0];
                                generatePDFReport(invoiceId);
                            } else {
                                DevExpress.ui.notify("يرجى تحديد فاتورة لإنشاء التقرير", "error", 1500);
                            }
                        }
                    },
                    location: 'after',
                    name: 'pdfButton'
                };

                toolbarItems.push(addButton);
                toolbarItems.push(pdfButton);
            }
            });


        $(function () {
            $("#gridContainer").dxDataGrid({
                dataSource: new DevExpress.data.CustomStore({
                    key: "SalesInvoiceId",
                    load: function (loadOptions) {
                        var d = $.Deferred();
                        var params = { branchId: $('#BranchId').val() };

                        $.getJSON('/SalesInvoices/LoadSalesInvoicesByBranch', params)
                            .done(function (result) { d.resolve(result); })
                            .fail(function () { d.reject("Data Loading Error"); });

                        return d.promise();
                    },
                    onRowUpdating: function (e) {
                        var oldData = e.oldData;
                        var newData = e.newData;
                        e.newData = Object.assign({}, oldData, newData);
                    },
                    update: function (key, values) {
                        return $.ajax({
                            url: '/SalesInvoices/UpdateSaleInvoice',
                            method: 'PUT',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                ...values,
                                SalesInvoiceId: key,
                            })
                        });
                    },
                    remove: function (key) {
                        return $.ajax({
                            url: '/SalesInvoices/DeleteSaleInvoice?invoiceId=' + encodeURIComponent(key),
                            method: 'DELETE'
                        });
                    }
                }),
                showBorders: true,
                paging: {
                    pageSize: 30
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 25, 50]
                },
                selection: {
                    mode: "multiple"
                },
                export: {
                    enabled: true,
                    allowExportSelectedData: true
                },
                onExporting: exporting,
                allowColumnResizing: true,
                columnAutoWidth: true,
                rtlEnabled: true,
                searchPanel: {
                    visible: true,
                    highlightCaseSensitive: true
                },
                groupPanel: { visible: false },
                rowAlternationEnabled: true,
                width: "100%",
                columns: [
                    {
                        caption: "استرجاع",
                        cellTemplate: function (container, options) {
                            $("<a>").addClass("dx-link")
                                .text("استرجاع الفاتورة")
                                .on("click", function () {
                                    window.location.href = "/SalesInvoices/ReturnInvoice?invoiceId=" + options.data.SalesInvoiceId;
                                })
                                .appendTo(container);
                        }
                    },
                    {
                        dataField: "SalesInvoiceId",
                        caption: "رقم الفاتورة"
                    },
                    {
                        dataField: "TotalAmount",
                        caption: "اجمالي الفاتورة بعد الخصم"
                    },
                    {
                        dataField: "TotalDiscount",
                        caption: "اجمالي الخصم"
                    },
                    {
                        dataField: "PaidUp",
                        caption: "المدفوع من الفاتورة"
                    },
                    {
                        dataField: "Remainder",
                        caption: "الباقي من المبلغ"
                    },
                    {
                        dataField: "CustomerId",
                        caption: "اسم العميل",
                        allowEditing: false,
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "CustomerId",
                                loadUrl: "/Customers/LoadCustomers"
                            }),
                            valueExpr: "CustomerId",
                            displayExpr: "CustomerName"
                        }
                    },
                    {
                        dataField: "Notes",
                        caption: "ملاحظات"
                    },
                    {
                        dataField: "PaymentMethodId",
                        caption: "الخزنة",
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "PaymentMethodId",
                                loadUrl: "/PaymentMethods/LoadPaymentMethods"
                            }),
                            valueExpr: "PaymentMethodId",
                            displayExpr: "PaymentMethodName"
                        }
                    },
                    {
                        dataField: "SaleDate",
                        caption: "تاريخ الفاتوره",
                        dataType: "date"
                    },
                    {
                        dataField: "PaidUpDate",
                        caption: "تاريخ التحصيل",
                        dataType: "date"
                    },
                    {
                        dataField: "UserId",
                        caption: "مدخل الفاتوره",
                        allowEditing: false,
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "UserId",
                                loadUrl: "/Users/LoadUsers"
                            }),
                            valueExpr: "UserId",
                            displayExpr: "UserName"
                        }
                    },
                    {
                        dataField: "BranchId",
                        caption: "الفرع",
                        lookup: {
                            dataSource: DevExpress.data.AspNet.createStore({
                                key: "BranchId",
                                loadUrl: "/Branches/LoadBranches"
                            }),
                            valueExpr: "BranchId",
                            displayExpr: "BranchName"
                        }
                    },
                ],
                onToolbarPreparing: function (e) {
                    var toolbarItems = e.toolbarOptions.items;
                    var addButton = {
                        widget: 'dxButton',
                        options: {
                            icon: 'fas fa-plus',
                            text: 'اضافة فاتورة مبيعات جديدة',
                            onClick: function () {
                                window.location.href = '@Url.Action("SalesInvoicesPage", "SalesInvoices")';
                            }
                        },
                        location: 'after',
                        name: 'addButton'
                    };
                    var pdfButton = {
                        widget: 'dxButton',
                        options: {
                            icon: 'fas fa-file-pdf',
                            text: 'طباعة فاتورة',
                            onClick: function () {
                                var selectedRowKeys = $("#gridContainer").dxDataGrid("instance").getSelectedRowKeys();
                                if (selectedRowKeys.length > 0) {
                                    var invoiceId = selectedRowKeys[0];
                                    generatePDFReport(invoiceId);
                                } else {
                                    DevExpress.ui.notify("يرجى تحديد فاتورة لإنشاء التقرير", "error", 1500);
                                }
                            }
                        },
                        location: 'after',
                        name: 'pdfButton'
                    };
                    toolbarItems.push(addButton, pdfButton);
                }
            });
        });

        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });
</script>
