
@{
    ViewData["Title"] = "SalesInvoicesPage";
    Layout = "_DevExtremeLayout";
}

<h1>اضافة فاتورة مبيعات</h1>

<div id="alertPlaceholder"></div>
<form id="invoiceForm">
    <div id="invoiceDetailsForm" style="margin-top: 20px;">
        <div class="row">
             <div class="col-md-1">
                <button type="button" id="btnAddCustomer" class="btn btn-secondary">اضافة عميل جديد</button>
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="customerId">اسم العميل</label>
                <select id="CustomerId" class="form-control" required></select>
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="branchId">اسم الفرع</label>
                <select id="BranchId" class="form-control"></select>
            </div>
        </div>
    </div>
</form>

<div class="modal fade" id="addCustomerModal" tabindex="-1" aria-labelledby="addCustomerModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCustomerModalLabel">اضافة عميل جديد</h5>
      </div>
      <div class="modal-body">
        <form id="formAddCustomer">
          <div class="form-group">
            <label for="CustomerName">اسم العميل</label>
               <input type="text" class="form-control" id="CustomerName" name="CustomerName" required>
          </div>
          <div class="form-group">
             <label for="PhoneNumber">رقم الهاتف</label>
            <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary" form="formAddCustomer">حفظ</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">اغلاق</button>
      </div>
    </div>
  </div>
</div>

<div id="itemForm">
    <h3>اضافة الاصناف</h3>
    <div class="row">
        <div class="form-group col-md-4 mb-3">
            <label for="ProductId">اسم المنتج</label>
            <select id="ProductId" class="form-control" placeholder="اسم المنتج" required></select>
        </div>
        <div class="form-group col-md-4 mb-3">
            <label for="SizeId">المقاس</label>
            <select id="SizeId" class="form-control" placeholder="المقاس" required></select>
        </div>
        <div class="form-group col-md-4 mb-3">
            <label for="ColorId">اللون</label>
            <select id="ColorId" class="form-control" placeholder="اللون" required></select>
        </div>
        <div class="form-group col-md-4 mb-3">
            <label for="Quantity">الكمية</label>
            <input type="number" id="Quantity" class="form-control" placeholder="الكمية" required min="0" />
            <div id="availableQtyDisplay" class="text-primary mt-2"></div>
        </div>
        <div class="form-group col-md-4 mb-3">
            <label for="SellPrice">سعر البيع للواحد</label>
            <input type="number" id="SellPrice" class="form-control" placeholder="سعر البيع للواحد" readonly min="0" />
        </div>
        <div class="form-group col-md-4 mb-3">
            <label for="discount">الخصم للقطعة الواحده</label>
            <input type="number" id="discount" class="form-control" placeholder="الخصم" value="0" required min="0" />

            <div id="maxDiscountDisplay" class="text-muted"></div>
            <input type="hidden" id="maxDiscount" value="" />
        </div>
        <button type="button" onclick="addItem()" class="btn btn-primary mb-3">اضافة صنف</button>
    </div>
</div>

<!-- Display items -->
<div id="itemsGridContainer"></div>

<!-- Invoice Details Form -->
<form id="invoiceForm">
    <div id="invoiceDetailsForm" style="margin-top: 20px;">
        <h3>بيانات الفاتورة</h3>
        <div class="row">
            <div class="form-group col-md-4 mb-3">
                <label for="paymentMethodName">طريقة الدفع</label>
                <select id="PaymentMethodId" class="form-control" required></select>
            </div>
            <div class="form-group col-md-4 mb-3">
                <label for="totalAmount">اجمالي مبلغ الفاتورة بعد الخصم</label>
                <input type="number" id="totalAmount" class="form-control" placeholder="اجمالي مبلغ الفاتورة" required readonly min="0" />
            </div>
            <div class="form-group col-md-4 mb-3">
                <label for="totalDiscount">اجمالي الخصم</label>
                <input type="number" id="totalDiscount" class="form-control" placeholder="اجمالي الخصم" readonly min="0" />
            </div>
            <div class="form-group col-md-4 mb-3">
                <label for="paidUp">المدفوع</label>
                <input type="number" id="paidUp" class="form-control" placeholder="المدفوع" required min="0" />
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="fullPaymentCheckbox">
                    <label class="form-check-label" for="fullPaymentCheckbox">
                        دفع كامل المبلغ
                    </label>
                </div>
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="remainder">الباقي</label>
                <input type="number" id="remainder" class="form-control" placeholder="الباقي" required readonly min="0" />
            </div>
            <div class="form-group col-md-2 mb-3">
                <label for="PaidUpDate">تاريخ التحصيل</label>
                <input type="date" id="PaidUpDate" class="form-control mb-3" placeholder="تاريخ التحصيل" />
            </div>
            <div class="form-group col-md-3 mb-3">
                <label for="saleDate">تاريخ الفاتورة</label>
                <input type="date" id="saleDate" class="form-control mb-3" placeholder="تاريخ الفاتورة" required />
            </div>
            <div class="row">
                <div class="form-group col-md-4 mb-3">
                    <select id="OfferId" class="form-control" onchange="fetchOfferDetails()"></select>
                </div>
                <div class="form-group col-md-3 mb-3">
                    <button type="button" id="btnApplyOffer" class="btn btn-success" onclick="applyOfferToInvoiceItems()">تطبيق العرض</button>
                </div>
            </div>
            <div class="row justify-content-center">
                <button type="button" onclick="saveAndPrintInvoice()" class="btn btn-primary col-md-5 mx-1 my-3">
                    <i class="fas fa-save"></i> حفظ وطباعة الفاتورة
                </button>
                <button type="button" onclick="saveInvoice()" class="btn btn-success col-md-5 mx-1 my-3">
                    <i class="fas fa-save"></i> حفظ الفاتورة
                </button>
            </div>

        </div>
    </div>
</form>

  <script>
    let selectedOfferDetails = null;

    async function populateOffers() {
        try {
            const response = await fetch('/Offer/GetAllActiveOffers');
            if (response.ok) {
                const offers = await response.json();
                const offerSelect = $('#OfferId');
                let options = '<option value="">اختر عرض</option>';
                offers.forEach(offer => {
                    options += `<option value="${offer.OfferId}">${offer.OfferName}</option>`;
                });
                offerSelect.html(options);
            } else {
            }
        } catch (error) {
        }
    }

    async function fetchOfferDetails() {
        const offerId = $('#OfferId').val();
        if (!offerId) {
            selectedOfferDetails = null;
            return;
        }
        try {
            const response = await fetch(`/Offer/GetDetilasOffersByOfferId?OfferId=${offerId}`);
            if (response.ok) {
                selectedOfferDetails = await response.json();
            } else {
                selectedOfferDetails = null;
            }
        } catch (error) {
            selectedOfferDetails = null;
        }
    }

    function applyOfferToInvoiceItems() {
        if (!selectedOfferDetails || !selectedOfferDetails.OfferType) {
            DevExpress.ui.notify(result.message, "برجاء اختيار عرض صالح", 3000);
            return;
        }
        calculateTotalsWithOffer();
        calculateTotals();
    }

    function calculateTotalsWithOffer() {
        if (!selectedOfferDetails) return; 
        switch (selectedOfferDetails.OfferType) {
            case "واحد وعليه واحد":
                applyBOGOffer(selectedOfferDetails);
                break;
            case "حزمة":
                applyBundleOffer(selectedOfferDetails);
                break;
            case "خصم":
                applyDiscountOffer(selectedOfferDetails);
                break;
            default:
                DevExpress.ui.notify('Unknown offer type', "error", 5000);
        }
    }

    function applyBOGOffer(offerDetails) {
        let totalDiscount = 0;
        let totalQuantity = 0;
        let SellPrice = 0;

        tempItems.forEach(item => {
            if (parseInt(offerDetails.ProductId) === parseInt(item.ProductId)) {
                totalQuantity += item.Quantity;
                SellPrice = item.SellPrice;
            }
        });

        if (totalQuantity < 2) {
            DevExpress.ui.notify("الكمية المدخلة اقل من 2 لتطبيق العرض", "error", 3000);
            document.getElementById('totalDiscount').value = 0;
            return;
        }

        const discountApplications = Math.floor(totalQuantity / 2);
        totalDiscount = discountApplications * SellPrice;
        document.getElementById('totalDiscount').value = totalDiscount;
    }

    function applyBundleOffer(offerDetails) {
        let totalDiscount = 0;
        let totalQuantity = 0;
        let totalAmount = 0;

        tempItems.forEach(item => {
            if (parseInt(offerDetails.ProductId) === parseInt(item.ProductId)) {
                totalQuantity += item.Quantity;
            }
        });

        if (totalQuantity >= offerDetails.RequiredQuantity) {
            const discountApplications = Math.floor(totalQuantity / offerDetails.RequiredQuantity);
            totalAmount = offerDetails.RequiredQuantity * tempItems.find(item => parseInt(offerDetails.ProductId) === parseInt(item.ProductId)).SellPrice;
            totalDiscount = offerDetails.DiscountedPrice * 0.01 * discountApplications;

            document.getElementById('totalDiscount').value = totalDiscount * totalAmount;
        } else {
            DevExpress.ui.notify("الكمية المدخلة اقل من الكمية المطلوبه بالعرض", "error", 3000);
            document.getElementById('totalDiscount').value = 0;
        }
    }

    function applyDiscountOffer(offerDetails) {
    let totalDiscount = 0;
    let totalQuantity = 0;
    let SellPrice = 0;

    tempItems.forEach(item => {
        if (parseInt(offerDetails.ProductId) === parseInt(item.ProductId)) {
            totalQuantity += item.Quantity;
            SellPrice = item.SellPrice;
        }
    });

    if (totalQuantity < offerDetails.RequiredQuantity) {
        DevExpress.ui.notify("الكمية المدخلة لا تساوي الكمية المطلوبه بالعرض", "error", 3000);
        document.getElementById('totalDiscount').value = 0;
        return;
    }

    const discountApplications = Math.floor(totalQuantity / offerDetails.RequiredQuantity);
    totalDiscount = discountApplications * offerDetails.DiscountedPrice;

    document.getElementById('totalDiscount').value = totalDiscount;
}

    $(document).ready(function () {
        populateOffers();
        // Open the modal
        $('#btnAddCustomer').click(function () {
            $('#addCustomerModal').modal('show');
        });

        $('.btn-secondary').click(function() {
            $('#addCustomerModal').modal('hide');
        });

        $('#formAddCustomer').submit(function (event) {
            event.preventDefault(); // Prevent the form from submitting via the browser.

            var customerName = $('#CustomerName').val();
            var phoneNumber = $('#PhoneNumber').val();
            if (phoneNumber.length < 11) {
                DevExpress.ui.notify('رقم الهاتف علي الاقل 11 رقم', "error", 5000);
                return;
            }
            else {
                var customerData = JSON.stringify({
                    CustomerName: $('#CustomerName').val(),
                    PhoneNumber: $('#PhoneNumber').val()
                });
            }

            $.ajax({
                type: 'POST',
                url: '/Customers/AddFastNewCustomer', 
                contentType: 'application/json', 
                data: customerData, 
                success: function (response) {
                    DevExpress.ui.notify(response.SuccessMessage, "success", 3000);
                    $('#addCustomerModal').modal('hide');
                        populateCustomersWithPhoneNumber(response.CustomerName, response.PhoneNumber).then(() => {
                    }).catch(error => console.error(error));
                },
                error: function (xhr, status, error) {
                    var errorMessage = xhr.status + ': ' + xhr.statusText;
                    alert('Error - ' + errorMessage);
                }
            });
        });
    });

    async function populateDropdown(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = document.getElementById(elementId);
                selectElement.innerHTML = '';
                data.forEach(item => {
                    const option = new Option(item[textField], item[valueField]);
                    selectElement.add(option);
                });
            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    async function populateDropdownSEARCH(url, elementId, valueField, textField) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                const selectElement = $(`#${elementId}`);
                let options = [];


                data.forEach(item => {
                    const optionText = `${item[valueField]} - ${item[textField]}`;
                    options.push(new Option(optionText, item[valueField], false, false));
                });

                selectElement.empty().append(options);

                selectElement.select2({
                    placeholder: "برجاء الاختيار",
                    allowClear: true,
                    width: '100%'
                });

                selectElement.data('select2').$container.addClass('custom-font-size');

                if (elementId === 'ProductId') {
                    const firstProductId = data[0] ? data[0][valueField] : null;
                    if (firstProductId) {
                        await fetchAvailableSizes(firstProductId);
                        await fetchAvailableColors(firstProductId);
                    }
                }

            } else {
                console.error('Failed to load data for:', elementId);
            }
        } catch (error) {
            console.error('Error fetching data for:', elementId, error);
        }
    }

    function populateCustomersWithPhoneNumber(customerName, phoneNumber) {
        return new Promise(async (resolve, reject) => {
            try {
                const response = await fetch('/Customers/LoadCustomers');
                if (response.ok) {
                    const customers = await response.json();
                    const customerSelect = $('#CustomerId');
                    let options = customers.map(customer => `<option value="${customer.CustomerId}">${customer.CustomerName} - ${customer.PhoneNumber}</option>`);
                    customerSelect.html(options.join(''));

                    // Search for the newly added customer by name or phone number
                    if (customerName && phoneNumber) {
                        const newCustomerOption = customers.find(customer => customer.CustomerName === customerName && customer.PhoneNumber === phoneNumber);
                        if (newCustomerOption) {
                            customerSelect.val(newCustomerOption.CustomerId).trigger('change');
                        } else {
                            console.error('Newly added customer not found in the list');
                        }
                    }

                    customerSelect.select2({
                        placeholder: "اختر عميل",
                        allowClear: true
                    });
                    resolve();
                } else {
                    reject('Failed to load customers');
                }
            } catch (error) {
                reject(error);
            }
        });
    }

    async function populateProductsAndTriggerChange() {
        await populateDropdownSEARCH('/Products/GetAllProductsInWarehouse', 'ProductId', 'ProductId', 'ProductName');
        $('#ProductId').trigger('change');
    }

    $(document).ready(function() {
        populateCustomersWithPhoneNumber();
    });

    async function fetchAvailableSizes(productId) {
    try {
        const response = await fetch(`/Products/GetAvailableSizes?ProductId=${productId}`);
        const data = await response.json();
        populateDropdownWithItems('SizeId', data, 'SizeName', 'SizeId');
    } catch (error) {
        console.error('Error fetching available sizes:', error);
    }
}

    async function fetchAvailableColors(productId) {
        try {
            // Correct the URL parameter to 'ProductId'
            const response = await fetch(`/Products/GetAvailableColors?ProductId=${productId}`);
            const data = await response.json();
            populateDropdownWithItems('ColorId', data, 'ColorName', 'ColorId');
        } catch (error) {
            console.error('Error fetching available colors:', error);
        }
    }

    function populateDropdownWithItems(elementId, items, textField, valueField) {
        const selectElement = document.getElementById(elementId);
        selectElement.innerHTML = ''; // clear existing options if needed
        items.forEach((item, index) => {
            const option = new Option(item[textField], item[valueField]);
            selectElement.add(option);
            // Select the first option by default
            if (index === 0) selectElement.selectedIndex = 0;
        });
    }

    function resetDropdown(elementId) {
        const selectElement = document.getElementById(elementId);
    }

    var temporaryInventory = {};

    async function fetchAvailableQuantity(productId, sizeId, colorId, branchId) {
    try {
        const response = await fetch(`/Products/GetAvailable?productId=${productId}&colorId=${colorId}&sizeId=${sizeId}&BranchId=${branchId}`);
        if (response.ok) {
            let availableQty = await response.json();
            const key = `${productId}-${sizeId}-${colorId}-${branchId}`;
            const tempQty = temporaryInventory[key] || 0;
            availableQty -= tempQty; // Subtract the temp quantity from the available quantity
            $('#Quantity').attr('max', availableQty);
            $('#availableQtyDisplay').text(`الكمية المتاحة: ${availableQty}`);
        } else {
            console.error('Failed to fetch available quantity');
            $('#availableQtyDisplay').text(`Failed to fetch available quantity`);
        }
    } catch (error) {
        console.error('Error fetching available quantity:', error);
        $('#availableQtyDisplay').text(`Error fetching available quantity`);
    }
}

    async function fetchSellPrice(productId) {
    try {
        const response = await fetch(`/Products/LoadProductById?ProductId=${productId}`);
        if (response.ok) {
            const data = await response.json();
                document.getElementById('SellPrice').value = data.SellPrice;
                // Update MaxDiscount display
                document.getElementById('maxDiscountDisplay').innerText = `الحد الأقصى للخصم: ${data.MaxDiscount}`;
                // Store MaxDiscount in a hidden input or use a global variable for validation
                document.getElementById('maxDiscount').value = data.MaxDiscount;
        } else {
                document.getElementById('SellPrice').value = '';
                document.getElementById('maxDiscountDisplay').innerText = '';
                document.getElementById('maxDiscount').value = '';
            }
    } catch (error) {
        console.error('Error fetching SellPrice for:', productId, error);
        document.getElementById('SellPrice').value = '';
        document.getElementById('maxDiscountDisplay').innerText = '';
        document.getElementById('maxDiscount').value = '';
    }
    }

    $('#ProductId').on('change', async function () {
        var productId = $(this).val();
        var branchId = $('#BranchId').val(); 

        if (productId) {
            await fetchSellPrice(productId);
            await fetchAvailableSizes(productId); 
            await fetchAvailableColors(productId);
        } else {
            resetDropdown('SizeId'); 
            resetDropdown('ColorId'); 
            $('#availableQtyDisplay').text('');
        }
        var sizeId = $('#SizeId').val();
        var colorId = $('#ColorId').val();

        if(productId && branchId && sizeId && colorId) {
            fetchAvailableQuantity(productId, sizeId, colorId, branchId);
        }
    });

    $(document).ready(function() {
        $('#ProductId, #SizeId, #ColorId, #BranchId').change(function() {
            // Get the current selected values
            var productId = $('#ProductId').val();
            var sizeId = $('#SizeId').val();
            var colorId = $('#ColorId').val();
            var branchId = $('#BranchId').val();


            var sizeId = $('#SizeId').val(); 
            var colorId = $('#ColorId').val();
                if (productId && sizeId && colorId && branchId) {
                    fetchAvailableQuantity(productId, sizeId, colorId, branchId);
            } else {
                $('#availableQtyDisplay').text('');
            }

        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        populateDropdownSEARCH('/Products/GetAllProductsInWarehouse', 'ProductId', 'ProductId', 'ProductName');
        //populateDropdownSEARCH('/Customers/LoadCustomers', 'CustomerId', 'CustomerId', 'CustomerName');
        populateDropdown('/Branches/LoadBranchesByUser', 'BranchId', 'BranchId', 'BranchName');
        populateDropdown('/PaymentMethods/LoadPaymentMethods', 'PaymentMethodId', 'PaymentMethodId', 'PaymentMethodName');
        document.getElementById('totalDiscount').addEventListener('input', calculateDiscounts);
        
        populateProductsAndTriggerChange();

        refreshItemsGrid();

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById('saleDate').value = today;

        $('#ProductId').on('change', function () {
            var productId = $(this).val();
            if (productId) {
                fetchSellPrice(productId);
            } else {
                document.getElementById('SellPrice').value = '';
            }
        });

        document.getElementById('fullPaymentCheckbox').addEventListener('change', function () {
            if (this.checked) {
                document.getElementById('paidUp').value = document.getElementById('totalAmount').value;
            } else {
                document.getElementById('paidUp').value = '';
            }
            calculateTotals();
        });
    });

    var tempItems = [];

    function addItem() {
        // Get item details

        var sellPrice = parseFloat(document.getElementById('SellPrice').value);
        var discount = parseFloat(document.getElementById('discount').value);
        var DiscountId = null;
        var maxDiscount = parseFloat(document.getElementById('maxDiscount').value);
        var productId = $('#ProductId').val();
        var sizeId = $('#SizeId').val();
        var colorId = $('#ColorId').val();
        var quantity = parseInt($('#Quantity').val());
        var maxQuantity = parseInt($('#Quantity').attr('max') || '0');

        if (quantity > maxQuantity) {
            DevExpress.ui.notify(`الكمية المدخلة تتجاوز الكمية المتاحة. الكمية المتاحة: ${maxQuantity}`, "error", 5000);
            return; 
        }

        if (quantity < 0) {
            DevExpress.ui.notify('الكمية لا يمكن أن تكون قيمة سالبة', "error", 5000);
            return;
        }

        // Validation for discount exceeding MaxDiscount
        if (discount > maxDiscount) {
            DevExpress.ui.notify(`الحد الأقصى للخصم هو ${maxDiscount}`, "error", 5000);
            return; 
        }

        if (discount < 0) {
            DevExpress.ui.notify('الخصم لا يمكن أن يكون قيمة سالبة', "error", 5000);
            return;
        }

        // Check if any field is empty
        if (!productId || !sizeId || !colorId || !quantity || !sellPrice) {
            DevExpress.ui.notify('برجاء ملاء بيانات الاصناف', "error", 5000);
            return;
        }

        var effectiveSellPrice = discount > 0 ? sellPrice - discount : sellPrice;
        var Totaldiscount = discount * quantity;

        if (effectiveSellPrice < 0) {
            DevExpress.ui.notify('الخصم لا يمكن أن يكون أكبر من سعر البيع للواحد', "error", 5000);
            return;
        }

        // Add the item to the temporary inventory
        var branchId = document.getElementById('BranchId').value;
        const key = `${productId}-${sizeId}-${colorId}-${branchId}`;
        temporaryInventory[key] = (temporaryInventory[key] || 0) + quantity;

        tempItems.push({
            ProductId: productId,
            SizeId: sizeId,
            ColorId: colorId,
            Quantity: quantity,
            SellPrice: effectiveSellPrice, 
            Discount: discount,
            totaldiscount: Totaldiscount,
            ItemDiscount: discount
        });

        // Reset input fields
        $('#ProductId').val(null).trigger('change');
        document.getElementById('SizeId').value = '';
        document.getElementById('ColorId').value = '';
        document.getElementById('Quantity').value = '0';
        document.getElementById('SellPrice').value = '';
        document.getElementById('discount').value = '0';

        // Refresh the grid
        refreshItemsGrid();
        calculateTotals();
        calculateDiscounts();
    }

    let productsLookup = [];

    async function fetchProductsLookup() {
        const response = await fetch('/Products/LoadProducts');
        if (response.ok) {
            productsLookup = await response.json();
        }
    }

    fetchProductsLookup();

    let sizesLookup = [];

    async function fetchsizesLookup() {
        const response = await fetch('/Sizes/LoadSizes');
        if (response.ok) {
            sizesLookup = await response.json();
        }
    }

    fetchsizesLookup();

    let colorsLookup = [];

    async function fetchcolorsLookup() {
        const response = await fetch('/Colors/LoadColors');
        if (response.ok) {
            colorsLookup = await response.json();
        }
    }

    fetchcolorsLookup();

    function refreshItemsGrid() {
        $("#itemsGridContainer").dxDataGrid({
            dataSource: tempItems,
            columns: [
                {
                    dataField: "ProductId", caption: "اسم المنتج" , lookup: {
                        dataSource: productsLookup,
                        valueExpr: "ProductId",
                        displayExpr: "ProductName"
                    }
                },
                {
                    dataField: "SizeId", caption: "المقاس", lookup: {
                        dataSource: sizesLookup,
                        valueExpr: "SizeId",
                        displayExpr: "SizeName"
                    }
                },
                {
                    dataField: "ColorId", caption: "اللون", lookup: {
                        dataSource: colorsLookup,
                        valueExpr: "ColorId",
                        displayExpr: "ColorName"
                    }
                },
                { dataField: "Quantity", caption: "الكمية" },
                { dataField: "SellPrice", caption: "سعر البيع للواحد بعد الخصم" },
                { dataField: "Discount", caption: "الخصم علي القطعة الواحدة" },
                { dataField: "totaldiscount", caption: "اجمالي المخصوم" }
            ],
            showBorders: true,
            editing: { 
                allowDeleting: true
            },
            onRowRemoved: function (e) {
                calculateTotals();
                document.getElementById('paidUp').value = document.getElementById('totalAmount').value;
                calculateTotals();
                calculateDiscounts();
            },
            onRowRemoving: function (e) {
                var index = tempItems.indexOf(e.data);
                if (index > -1) {
                    tempItems.splice(index, 1); 
                }
            },
            rtlEnabled: true,
            columnAutoWidth: true
        });
    }

    function calculateTotals() {
        let totalAmount = 0;

        tempItems.forEach(item => {
            totalAmount += item.Quantity * item.SellPrice;
        });

        document.getElementById('totalAmount').value = totalAmount.toFixed(2) - document.getElementById('totalDiscount').value ;
        document.getElementById('paidUp').value = totalAmount.toFixed(2) - document.getElementById('totalDiscount').value ;
        calculateRemainder();
    }

    function calculateRemainder() {
        const totalAmount = parseFloat(document.getElementById('totalAmount').value) || 0;
        const paidUp = parseFloat(document.getElementById('paidUp').value) || 0;
        const remainder = totalAmount - paidUp;

        // Update remainder input
        document.getElementById('remainder').value = remainder.toFixed(2);
    }

    document.getElementById('paidUp').addEventListener('input', function () {
        calculateRemainder();
    });

    function calculateDiscounts() {
        let DiscountsAmount = 0;

        // Calculate totalAmount
        tempItems.forEach(item => {
            DiscountsAmount += item.totaldiscount;
        });

        // Update totalAmount input
        document.getElementById('totalDiscount').value = DiscountsAmount.toFixed(2);
    }

    function displayMessage(type, message) {
        const messageContainer = document.createElement("div");
        messageContainer.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
        messageContainer.role = "alert";
        messageContainer.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;

    const alertPlaceholder = document.getElementById("alertPlaceholder");
    alertPlaceholder.innerHTML = '';
    alertPlaceholder.appendChild(messageContainer);

        setTimeout(() => {
            $(messageContainer).fadeOut('slow', () => {
                messageContainer.remove();
            });
        }, 5000);
    }

    function resetTemporaryInventory() {
        temporaryInventory = {};
    }

    async function saveInvoice() {
        if (tempItems.length === 0) {
           DevExpress.ui.notify('يجب اضافة صنف واحد علي الاقل', "error", 5000);
           return; 
        }

        var branchId = document.getElementById('BranchId').value;
        const permissionResponse = await fetch(`/UserBranches/CheckBranchPermission?branchId=${branchId}`);
        const permissionResult = await permissionResponse.json();
        if (!permissionResult.success) {
            displayMessage('error', permissionResult.message);
            DevExpress.ui.notify(permissionResult.message, "error", 5000);
            return;
        }

        // Create FormData object
        var formData = new FormData();
        formData.append("items", JSON.stringify(tempItems));

        // Append other invoice details to formData
        formData.append("CustomerId", document.getElementById('CustomerId').value);
        formData.append("BranchId", document.getElementById('BranchId').value);
        formData.append("PaymentMethodId", document.getElementById('PaymentMethodId').value);
        formData.append("TotalAmount", document.getElementById('totalAmount').value);
        formData.append("PaidUp", document.getElementById('paidUp').value);
        formData.append("Remainder", document.getElementById('remainder').value);
        formData.append("SaleDate", document.getElementById('saleDate').value);
        formData.append("PaidUpDate", document.getElementById('PaidUpDate').value);
        formData.append("TotalDiscount", document.getElementById('totalDiscount').value);

        try {
            let response = await fetch('/SalesInvoices/AddNewSaleInvoice', {
                method: 'POST',
                body: formData 
            });
            if (response.ok) {
                let result = await response.json();
                if (result.success) {
                    displayMessage('success', result.message);
                    DevExpress.ui.notify(result.message, "success", 5000);
                    document.getElementById('invoiceForm').reset();
                    tempItems = [];
                    refreshItemsGrid();
                    resetTemporaryInventory();
                    document.getElementById('totalAmount').value = '0';
                    document.getElementById('paidUp').value = '0';
                    document.getElementById('remainder').value = '0';
                    DevExpress.ui.notify(result.message, "success", 5000);
                } else {
                    displayMessage('error', result.message);
                    DevExpress.ui.notify(result.message, "error", 5000);
                }
            }
        } catch (error) {
            DevExpress.ui.notify(`Error saving invoice : ${error}`, "error", 5000);
        }
    }

    refreshItemsGrid();

    async function saveAndPrintInvoice() {
        try {
            // Print the invoice by ID
            if (tempItems.length === 0) {
                DevExpress.ui.notify('يجب اضافة صنف واحد علي الاقل', "error", 5000);
                return;
            }
            // Save the invoice
            await saveInvoice();

            // After saving, get the invoice ID
            const response = await fetch('/SalesInvoices/GetLastInvoiceId');
            if (!response.ok) {
                throw new Error('Failed to retrieve the last invoice ID');
            }
            const data = await response.json();
            const invoiceId = data.lastInvoiceId;

            printInvoiceById(invoiceId);
        } catch (error) {

        }
    }

    async function printInvoiceById(invoiceId) {
    try {
        const response = await fetch(`/SalesInvoices/SaleInvoiceReport?invoiceId=${invoiceId}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch PDF content: ${response.statusText}`);
        }
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);

        // Open the PDF in a new window or tab
        const pdfWindow = window.open(url, "_blank");
        if (!pdfWindow) {
            throw new Error('Failed to open new window. Please check your popup blocker settings.');
        }

        pdfWindow.addEventListener('load', function() {
            try {
                pdfWindow.print();
            } catch (e) {
                DevExpress.ui.notify(`Error saving invoice : ${e}`, "error", 5000);
            }
        }, false);
    } catch (error) {
        DevExpress.ui.notify(`Error saving invoice : ${error}`, "error", 5000);
    }
}
</script>

<style>
    .select2-container--default .select2-selection--single {
        height: auto;
        padding: 3px;
    }
</style>
