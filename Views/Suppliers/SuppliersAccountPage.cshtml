
@{
    ViewData["Title"] = "SuppliersAccountPage";
    Layout = "_DevExtremeLayout";
}

<div class="page-title">
    <h1>كشف فواتير الموردين</h1>
</div>

<div class="dashboard-container">
    <div class="dashboard-item supplier-select">
        <label for="BranchId" class="dashboard-label">اسم المورد</label>
        <select id="BranchId" class="dashboard-select"></select>
    </div>
    <div class="dashboard-item dashboard-summary total-invoices">
        <div class="summary-title">اجمالي الفواتير</div>
        <div class="summary-value" id="totalInvoicesSum">0</div>
    </div>
    <div class="dashboard-item dashboard-summary total-paidup">
        <div class="summary-title">اجمالي المدفوع</div>
        <div class="summary-value" id="totalPaidUpSum">0</div>
    </div>
    <div class="dashboard-item dashboard-summary total-remainder">
        <div class="summary-title">اجمالي المتبقي</div>
        <div class="summary-value" id="totalRemainderSum">0</div>
    </div>
</div>



<div id="gridContainer"></div>

<script>
    function updateSupplierSums(supplierId) {
        $.getJSON('/Suppliers/LoadSupplierSums', { SupplierId: supplierId }, function (data) {
            var totalInvoicesSum = data.TotalAmountSum !== null ? data.TotalAmountSum.toFixed(2) : '0.00';
            var totalPaidUpSum = data.PaidUpSum !== null ? data.PaidUpSum.toFixed(2) : '0.00';
            var totalRemainderSum = data.RemainderSum !== null ? data.RemainderSum.toFixed(2) : '0.00';

            $('#totalInvoicesSum').text(totalInvoicesSum);
            $('#totalPaidUpSum').text(totalPaidUpSum);
            $('#totalRemainderSum').text(totalRemainderSum);
        });
    }
    updateSupplierSums($('#BranchId').val());

    $('#BranchId').change(function () {
        updateSupplierSums($(this).val());
    });

    $(function () {
        $.getJSON('/Suppliers/LoadSuppliers', function (data) {
            var branchSelect = $('#BranchId');
            $.each(data, function () {
                branchSelect.append($('<option/>').val(this.SupplierId).text(this.SupplierName));
            });
            if (data.length > 0) {
                branchSelect.val(data[0].SupplierId); 
                updateSupplierSums(data[0].SupplierId);
            }
        });


        $("#gridContainer").dxDataGrid({
            dataSource: new DevExpress.data.CustomStore({
                key: "PurchaseInvoiceId",
                load: function (loadOptions) {
                    var d = $.Deferred();
                    var params = { SupplierId: $('#BranchId').val() };

                    $.getJSON('/Suppliers/LoadSuppliersAccount', params)
                        .done(function (result) { d.resolve(result); })
                        .fail(function () { d.reject("Data Loading Error"); });

                    return d.promise();
                },
                onRowUpdating: function (e) {
                    var oldData = e.oldData;
                    var newData = e.newData;

                    if (newData.PaidUp !== undefined) {
                        newData.Remainder = oldData.TotalAmount - newData.PaidUp;
                    }

                    e.newData = Object.assign({}, oldData, newData);
                },
                update: function (key, values) {
                    var url = '/PurchaseInvoices/UpdatePurchaseInvoice/' + encodeURIComponent(key);

                    var dataToSend = JSON.stringify({ values: values });

                    return $.ajax({
                        url: url,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: dataToSend
                    })
                        .done(function (response) {
                            DevExpress.ui.notify({ message: "Invoice updated successfully" }, "success", 3000);
                        })
                        .fail(function (jqXHR) {
                            var message = "Could not update invoice";
                            if (jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.ErrorMessage) {
                                message = jqXHR.responseJSON.ErrorMessage;
                            }
                            DevExpress.ui.notify({ message: message }, "error", 3000);
                        });
                },
                remove: function (key) {
                    return $.ajax({
                        url: '/PurchaseInvoices/DeletePurchaseInvoice?invoiceId=' + encodeURIComponent(key),
                        method: 'DELETE'
                    });
                }
            }),
            onToolbarPreparing: onToolbarPreparing,
            selection: { mode: "multiple" },
            export: { enabled: true, allowExportSelectedData: true },
            onExporting: exporting,
            columnAutoWidth: true,
            editing: {
                mode: "popup",
                allowUpdating: true,
                allowDeleting: true,
                popup: {
                    title: "فاتورة مشتريات",
                    showTitle: true,
                    width: 800,
                    height: 700
                }
            },
            rtlEnabled: true,
            paging: { pageSize: 10 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 25, 50, 100]
            },
            searchPanel: { visible: true, highlightCaseSensitive: true },
            groupPanel: { visible: false },
            rowAlternationEnabled: true,
            width: "100%",
            showBorders: true,
            onRowUpdating: function (e) {
                var oldData = e.oldData;
                var newData = e.newData;

                var newPaidUp = newData.PaidUp !== undefined ? newData.PaidUp : oldData.PaidUp;
                var totalAmount = oldData.TotalAmount !== undefined ? oldData.TotalAmount : 0;

                var newRemainder = totalAmount - newPaidUp;
                newData.Remainder = newRemainder;
                e.newData = Object.assign({}, oldData, newData);
            },
            columns: [
                {
                    dataField: "PurchaseInvoiceId",
                    caption: "رقم الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "TotalAmount",
                    caption: "اجمالي الفاتورة",
                    allowEditing: false
                },
                {
                    dataField: "PaidUp",
                    caption: "المدفوع من الفاتورة"
                },
                {
                    dataField: "Remainder",
                    caption: "الباقي من المبلغ",
                    allowEditing: false,
                    calculateCellValue: function (rowData) {
                        return rowData.TotalAmount - rowData.PaidUp;
                    }
                },
                {
                    dataField: "SupplierId",
                    caption: "اسم المورد",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "SupplierId",
                            loadUrl: "/Suppliers/LoadSuppliers"
                        }),
                        valueExpr: "SupplierId",
                        displayExpr: "SupplierName"
                    }
                },
                {
                    dataField: "PaymentMethodId",
                    caption: "طريقة الدفع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "PaymentMethodId",
                            loadUrl: "/PaymentMethods/LoadPaymentMethods"
                        }),
                        valueExpr: "PaymentMethodId",
                        displayExpr: "PaymentMethodName"
                    }
                },
                {
                    dataField: "PurchaseDate",
                    caption: "تاريخ الفاتورة",
                    dataType: "date"
                },
                {
                    dataField: "Notes",
                    caption: "ملاحظات"
                },
                {
                    dataField: "PaidUpDate",
                    caption: "تاريخ التحصيل",
                    dataType: "date"
                },
                {
                    dataField: "UserId",
                    caption: "مدخل الفاتورة",
                    allowEditing: false,
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "UserId",
                            loadUrl: "/Users/LoadUsers"
                        }),
                        valueExpr: "UserId",
                        displayExpr: "UserName"
                    }
                },
                {
                    dataField: "BranchId",
                    caption: "اسم الفرع",
                    lookup: {
                        dataSource: DevExpress.data.AspNet.createStore({
                            key: "BranchId",
                            loadUrl: "/Branches/LoadBranches"
                        }),
                        valueExpr: "BranchId",
                        displayExpr: "BranchName"
                    }
                },
            ],
            columnFixing: {
                enabled: true
            },
            masterDetail: {
                enabled: true,
                template: function (container, options) {
                    $("<div>")
                        .addClass("master-detail-grid")
                        .dxDataGrid({
                            columnAutoWidth: true,
                            showBorders: true,
                            columns: [
                                { dataField: "ProductName", caption: "اسم المنتج" },
                                { dataField: "SizeName", caption: "المقاس" },
                                { dataField: "ColorName", caption: "اللون" },
                                { dataField: "Quantity", caption: "الكمية" },
                                { dataField: "BuyPrice", caption: "سعر الشراء للواحد" }
                            ],
                            dataSource: new DevExpress.data.CustomStore({
                                load: function (loadOptions) {
                                    return $.getJSON('/PurchaseItems/LoadPurchaseItemsByInvoiceId', {
                                        purchaseInvoiceId: options.key
                                    });
                                }
                            })
                        }).appendTo(container);
                }
            }
        });

        $('#BranchId').change(function () {
            $("#gridContainer").dxDataGrid("instance").refresh();
        });
    });

    function onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        toolbarItems.push({
            widget: 'dxButton',
            options: {
                icon: 'fas fa-plus',
                text: 'اضافة فاتوره مشتريات جديده',
                onClick: function () {
                    window.location.href = '@Url.Action("PurchaseInvoicesPage", "PurchaseInvoices")';
                }
            },
            location: 'after'
        });
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('PurchaseInvoices');
        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PurchaseInvoices.xlsx');
            });
        });
    }
</script>
<style>
    :root {
        --bg-color: #f0f4f8;
        --primary-color: #007bff;
        --info-color: #17a2b8;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --text-color: #333;
        --border-radius: 10px;
    }

    .dashboard-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 20px;
        padding: 20px;
        background-color: var(--bg-color);
    }

    .dashboard-item {
        background: white;
        padding: 20px;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .supplier-select {
        grid-column: span 2;
    }

    .dashboard-select, .dashboard-label {
        width: 100%;
        display: block;
        margin-bottom: 10px;
    }

    .summary-title {
        color: var(--text-color);
        font-size: 1rem;
        margin-bottom: 5px;
    }

    .summary-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .total-invoices .summary-value {
        color: var(--primary-color);
    }

    .total-paidup .summary-value {
        color: var(--success-color);
    }

    .total-remainder .summary-value {
        color: var(--danger-color);
    }

</style>
<link rel="stylesheet" href="~/css/site.css">
